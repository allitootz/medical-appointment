{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\staffs\\\\login page\\\\AdminPasswordModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport { ip } from '../../../ContentExport';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPasswordModal = ({\n  show,\n  handleClose,\n  user,\n  onComplete\n}) => {\n  _s();\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Use effect to set the old password from the user prop when modal opens\n  useEffect(() => {\n    if (user && user.password) {\n      setOldPassword(user.password);\n    }\n  }, [user]);\n  const handleChangePassword = async () => {\n    if (newPassword !== confirmNewPassword) {\n      setErrorMessage('Passwords do not match');\n      return;\n    }\n    try {\n      // Make the request to change the admin password\n      await axios.put(`${ip.address}/admin/api/change-password/${user._id}`, {\n        oldPassword,\n        newPassword,\n        confirmNewPassword\n      });\n      setSuccessMessage('Password changed successfully!');\n\n      // Wait for a short delay before reloading the page\n      setTimeout(() => {\n        window.location.reload(); // Reload the page to reflect changes\n      }, 1000); // You can adjust the timeout duration as needed\n    } catch (error) {\n      setErrorMessage('Failed to change password. Please try again.');\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Change Your Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 26\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'green'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"newPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Enter new password\",\n            value: newPassword,\n            onChange: e => setNewPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"confirmNewPassword\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm New Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"password\",\n            placeholder: \"Confirm new password\",\n            value: confirmNewPassword,\n            onChange: e => setConfirmNewPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleChangePassword,\n        children: \"Change Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPasswordModal, \"V8OxUDmeL3UXSwz2VbsmASQJf0M=\");\n_c = AdminPasswordModal;\nexport default AdminPasswordModal;\nvar _c;\n$RefreshReg$(_c, \"AdminPasswordModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Button","Form","axios","ip","jsxDEV","_jsxDEV","AdminPasswordModal","show","handleClose","user","onComplete","_s","oldPassword","setOldPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","errorMessage","setErrorMessage","successMessage","setSuccessMessage","password","handleChangePassword","put","address","_id","setTimeout","window","location","reload","error","console","log","onHide","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","style","color","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","Footer","variant","onClick","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/staffs/login page/AdminPasswordModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { ip } from '../../../ContentExport';\r\n\r\nconst AdminPasswordModal = ({ show, handleClose, user, onComplete }) => {\r\n  const [oldPassword, setOldPassword] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n\r\n  // Use effect to set the old password from the user prop when modal opens\r\n  useEffect(() => {\r\n    if (user && user.password) {\r\n      setOldPassword(user.password);\r\n    }\r\n  }, [user]);\r\n\r\n  const handleChangePassword = async () => {\r\n    if (newPassword !== confirmNewPassword) {\r\n      setErrorMessage('Passwords do not match');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Make the request to change the admin password\r\n      await axios.put(`${ip.address}/admin/api/change-password/${user._id}`, {\r\n        oldPassword,\r\n        newPassword,\r\n        confirmNewPassword,\r\n      });\r\n\r\n      setSuccessMessage('Password changed successfully!');\r\n\r\n      // Wait for a short delay before reloading the page\r\n      setTimeout(() => {\r\n        window.location.reload();  // Reload the page to reflect changes\r\n      }, 1000);  // You can adjust the timeout duration as needed\r\n\r\n    } catch (error) {\r\n      setErrorMessage('Failed to change password. Please try again.');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Change Your Password</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n        {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}\r\n        <Form>\r\n          <Form.Group controlId=\"newPassword\">\r\n            <Form.Label>New Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Enter new password\"\r\n              value={newPassword}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"confirmNewPassword\">\r\n            <Form.Label>Confirm New Password</Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              placeholder=\"Confirm new password\"\r\n              value={confirmNewPassword}\r\n              onChange={(e) => setConfirmNewPassword(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={handleChangePassword}>\r\n          Change Password\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AdminPasswordModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AACrD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,WAAW;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACAC,SAAS,CAAC,MAAM;IACd,IAAIW,IAAI,IAAIA,IAAI,CAACa,QAAQ,EAAE;MACzBT,cAAc,CAACJ,IAAI,CAACa,QAAQ,CAAC;IAC/B;EACF,CAAC,EAAE,CAACb,IAAI,CAAC,CAAC;EAEV,MAAMc,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAIT,WAAW,KAAKE,kBAAkB,EAAE;MACtCG,eAAe,CAAC,wBAAwB,CAAC;MACzC;IACF;IAEA,IAAI;MACF;MACA,MAAMjB,KAAK,CAACsB,GAAG,CAAC,GAAGrB,EAAE,CAACsB,OAAO,8BAA8BhB,IAAI,CAACiB,GAAG,EAAE,EAAE;QACrEd,WAAW;QACXE,WAAW;QACXE;MACF,CAAC,CAAC;MAEFK,iBAAiB,CAAC,gCAAgC,CAAC;;MAEnD;MACAM,UAAU,CAAC,MAAM;QACfC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAAE;MAC7B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAE;IAEb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,eAAe,CAAC,8CAA8C,CAAC;MAC/Da,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EAED,oBACE1B,OAAA,CAACN,KAAK;IAACQ,IAAI,EAAEA,IAAK;IAAC2B,MAAM,EAAE1B,WAAY;IAAA2B,QAAA,gBACrC9B,OAAA,CAACN,KAAK,CAACqC,MAAM;MAACC,WAAW;MAAAF,QAAA,eACvB9B,OAAA,CAACN,KAAK,CAACuC,KAAK;QAAAH,QAAA,EAAC;MAAoB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACfrC,OAAA,CAACN,KAAK,CAAC4C,IAAI;MAAAR,QAAA,GACRjB,YAAY,iBAAIb,OAAA;QAAGuC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAV,QAAA,EAAEjB;MAAY;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC9DtB,cAAc,iBAAIf,OAAA;QAAGuC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAV,QAAA,EAAEf;MAAc;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrErC,OAAA,CAACJ,IAAI;QAAAkC,QAAA,gBACH9B,OAAA,CAACJ,IAAI,CAAC6C,KAAK;UAACC,SAAS,EAAC,aAAa;UAAAZ,QAAA,gBACjC9B,OAAA,CAACJ,IAAI,CAAC+C,KAAK;YAAAb,QAAA,EAAC;UAAY;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACrCrC,OAAA,CAACJ,IAAI,CAACgD,OAAO;YACXC,IAAI,EAAC,UAAU;YACfC,WAAW,EAAC,oBAAoB;YAChCC,KAAK,EAAEtC,WAAY;YACnBuC,QAAQ,EAAGC,CAAC,IAAKvC,cAAc,CAACuC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,eAEbrC,OAAA,CAACJ,IAAI,CAAC6C,KAAK;UAACC,SAAS,EAAC,oBAAoB;UAAAZ,QAAA,gBACxC9B,OAAA,CAACJ,IAAI,CAAC+C,KAAK;YAAAb,QAAA,EAAC;UAAoB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eAC7CrC,OAAA,CAACJ,IAAI,CAACgD,OAAO;YACXC,IAAI,EAAC,UAAU;YACfC,WAAW,EAAC,sBAAsB;YAClCC,KAAK,EAAEpC,kBAAmB;YAC1BqC,QAAQ,EAAGC,CAAC,IAAKrC,qBAAqB,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACbrC,OAAA,CAACN,KAAK,CAACyD,MAAM;MAAArB,QAAA,gBACX9B,OAAA,CAACL,MAAM;QAACyD,OAAO,EAAC,WAAW;QAACC,OAAO,EAAElD,WAAY;QAAA2B,QAAA,EAAC;MAElD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTrC,OAAA,CAACL,MAAM;QAACyD,OAAO,EAAC,SAAS;QAACC,OAAO,EAAEnC,oBAAqB;QAAAY,QAAA,EAAC;MAEzD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEZ,CAAC;AAAC/B,EAAA,CAjFIL,kBAAkB;AAAAqD,EAAA,GAAlBrD,kBAAkB;AAmFxB,eAAeA,kBAAkB;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}