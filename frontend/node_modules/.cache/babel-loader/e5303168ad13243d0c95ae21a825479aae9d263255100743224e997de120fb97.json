{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\staffs\\\\medical secretary\\\\components\\\\Appointments\\\\AssignAppointmentModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AssignAppointmentModal = ({\n  show,\n  handleClose,\n  alldoctors,\n  selectedDoctor,\n  setSelectedDoctor,\n  selectedDate,\n  setSelectedDate,\n  selectedTime,\n  setSelectedTime,\n  handleSaveDetails,\n  error\n}) => {\n  _s();\n  const [availableTimes, setAvailableTimes] = useState([]); // Available times for the selected doctor and date\n  const [bookedTimes, setBookedTimes] = useState([]); // Booked times for the selected date\n  const [manualTimeInput, setManualTimeInput] = useState(false); // Toggle between time slots and manual input\n  const [availability, setAvailability] = useState({}); // Holds availability data for doctor\n  const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(false); // Tracks whether appointments are active\n\n  // Fetch available times based on the selected doctor and date\n  useEffect(() => {\n    if (selectedDoctor) {\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor}/available`).then(response => {\n        const {\n          availability,\n          activeAppointmentStatus\n        } = response.data;\n        console.log('Doctor Availability:', availability); // Debugging\n        console.log('Active Appointment Status:', activeAppointmentStatus); // Debugging\n        setAvailability(availability);\n        setActiveAppointmentStatus(activeAppointmentStatus);\n      }).catch(err => {\n        console.log(err.response.data);\n      });\n    }\n  }, [selectedDoctor]);\n\n  // Fetch booked times for the selected doctor and date\n  useEffect(() => {\n    if (selectedDoctor && selectedDate) {\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor}/booked-slots?date=${selectedDate}`).then(response => {\n        const bookedSlots = response.data.bookedSlots;\n        console.log(`Booked Times for ${selectedDate}:`, bookedSlots);\n        setBookedTimes(bookedSlots);\n      }).catch(err => {\n        console.log(err.response.data);\n      });\n    }\n  }, [selectedDoctor, selectedDate]);\n\n  // Handle manual input fallback when no doctor is selected\n  useEffect(() => {\n    setManualTimeInput(!selectedDoctor); // Enable manual input if no doctor is selected\n  }, [selectedDoctor]);\n  const handleTimeChange = e => {\n    setSelectedTime(e.target.value); // Save selected time\n  };\n  const generateTimeIntervals = (start, end, interval) => {\n    const times = [];\n    const [startHour, startMinute] = start.split(':').map(Number);\n    const [endHour, endMinute] = end.split(':').map(Number);\n    let currentTime = new Date(1970, 0, 1, startHour, startMinute);\n    const endTime = new Date(1970, 0, 1, endHour, endMinute);\n    while (currentTime <= endTime) {\n      times.push(currentTime.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      }));\n      currentTime = new Date(currentTime.getTime() + interval * 60000); // interval in minutes\n    }\n    return times;\n  };\n  const getAvailableTimes = day => {\n    const dayAvailability = availability[day]; // Access availability for the specific day\n    if (!dayAvailability) return [];\n    let times = [];\n\n    // If morning times are available\n    if (dayAvailability.morning && dayAvailability.morning.available) {\n      const morningTimes = generateTimeIntervals(dayAvailability.morning.startTime, dayAvailability.morning.endTime, dayAvailability.morning.interval || 30 // Default to 30 minutes\n      );\n      times = times.concat(morningTimes);\n    }\n\n    // If afternoon times are available\n    if (dayAvailability.afternoon && dayAvailability.afternoon.available) {\n      const afternoonTimes = generateTimeIntervals(dayAvailability.afternoon.startTime, dayAvailability.afternoon.endTime, dayAvailability.afternoon.interval || 30 // Default to 30 minutes\n      );\n      times = times.concat(afternoonTimes);\n    }\n    return times;\n  };\n  useEffect(() => {\n    if (selectedDate && availability) {\n      const selectedDateObj = new Date(selectedDate);\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      const day = daysOfWeek[selectedDateObj.getDay()];\n      const times = getAvailableTimes(day);\n      console.log(`Available Times for ${day}:`, times);\n      setAvailableTimes(times);\n    } else {\n      setAvailableTimes([]);\n    }\n  }, [selectedDate, availability]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Assign Appointment Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formAssignDoctor\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Assign Doctor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          value: selectedDoctor,\n          onChange: e => setSelectedDoctor(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Doctor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), alldoctors.map(doctor => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: doctor._id,\n            children: `${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`\n          }, doctor._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formAssignDate\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Assign Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"date\",\n          value: selectedDate,\n          onChange: e => setSelectedDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"formAssignTime\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\"Assign Time \", manualTimeInput ? \"(Manual)\" : \"(From Available Slots)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), manualTimeInput ?\n        /*#__PURE__*/\n        // Manual time input when no doctor is selected\n        _jsxDEV(Form.Control, {\n          type: \"time\",\n          value: selectedTime,\n          onChange: handleTimeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this) :\n        // Safeguard check if availableTimes is indeed an array\n        Array.isArray(availableTimes) && availableTimes.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: availableTimes.map(timeSlot => /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-primary\",\n            onClick: () => setSelectedTime(timeSlot),\n            disabled: bookedTimes.includes(timeSlot) // Disable if the time slot is already booked\n            ,\n            className: \"m-1\",\n            children: timeSlot\n          }, timeSlot, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No available times for the selected date.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: handleSaveDetails,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(AssignAppointmentModal, \"EZO7YzovAtKErMqtfBGdQ0W+/mo=\");\n_c = AssignAppointmentModal;\nexport default AssignAppointmentModal;\nvar _c;\n$RefreshReg$(_c, \"AssignAppointmentModal\");","map":{"version":3,"names":["React","useState","useEffect","Modal","Button","Form","axios","jsxDEV","_jsxDEV","AssignAppointmentModal","show","handleClose","alldoctors","selectedDoctor","setSelectedDoctor","selectedDate","setSelectedDate","selectedTime","setSelectedTime","handleSaveDetails","error","_s","availableTimes","setAvailableTimes","bookedTimes","setBookedTimes","manualTimeInput","setManualTimeInput","availability","setAvailability","activeAppointmentStatus","setActiveAppointmentStatus","get","then","response","data","console","log","catch","err","bookedSlots","handleTimeChange","e","target","value","generateTimeIntervals","start","end","interval","times","startHour","startMinute","split","map","Number","endHour","endMinute","currentTime","Date","endTime","push","toLocaleTimeString","hour","minute","getTime","getAvailableTimes","day","dayAvailability","morning","available","morningTimes","startTime","concat","afternoon","afternoonTimes","selectedDateObj","daysOfWeek","getDay","onHide","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","style","color","Group","controlId","Label","Control","as","onChange","doctor","_id","dr_firstName","dr_middleInitial","dr_lastName","type","Array","isArray","length","timeSlot","variant","onClick","disabled","includes","className","Footer","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/staffs/medical secretary/components/Appointments/AssignAppointmentModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst AssignAppointmentModal = ({ \r\n  show, \r\n  handleClose, \r\n  alldoctors, \r\n  selectedDoctor, \r\n  setSelectedDoctor, \r\n  selectedDate, \r\n  setSelectedDate, \r\n  selectedTime, \r\n  setSelectedTime, \r\n  handleSaveDetails, \r\n  error \r\n}) => {\r\n  const [availableTimes, setAvailableTimes] = useState([]); // Available times for the selected doctor and date\r\n  const [bookedTimes, setBookedTimes] = useState([]); // Booked times for the selected date\r\n  const [manualTimeInput, setManualTimeInput] = useState(false); // Toggle between time slots and manual input\r\n  const [availability, setAvailability] = useState({}); // Holds availability data for doctor\r\n  const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(false); // Tracks whether appointments are active\r\n\r\n  // Fetch available times based on the selected doctor and date\r\n  useEffect(() => {\r\n    if (selectedDoctor) {\r\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor}/available`)\r\n        .then((response) => {\r\n          const { availability, activeAppointmentStatus } = response.data;\r\n          console.log('Doctor Availability:', availability); // Debugging\r\n          console.log('Active Appointment Status:', activeAppointmentStatus); // Debugging\r\n          setAvailability(availability);\r\n          setActiveAppointmentStatus(activeAppointmentStatus);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response.data);\r\n        });\r\n    }\r\n  }, [selectedDoctor]);\r\n\r\n  // Fetch booked times for the selected doctor and date\r\n  useEffect(() => {\r\n    if (selectedDoctor && selectedDate) {\r\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor}/booked-slots?date=${selectedDate}`)\r\n        .then((response) => {\r\n          const bookedSlots = response.data.bookedSlots;\r\n          console.log(`Booked Times for ${selectedDate}:`, bookedSlots); \r\n          setBookedTimes(bookedSlots);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response.data);\r\n        });\r\n    }\r\n  }, [selectedDoctor, selectedDate]);\r\n\r\n  // Handle manual input fallback when no doctor is selected\r\n  useEffect(() => {\r\n    setManualTimeInput(!selectedDoctor); // Enable manual input if no doctor is selected\r\n  }, [selectedDoctor]);\r\n\r\n  const handleTimeChange = (e) => {\r\n    setSelectedTime(e.target.value); // Save selected time\r\n  };\r\n\r\n  const generateTimeIntervals = (start, end, interval) => {\r\n    const times = [];\r\n    const [startHour, startMinute] = start.split(':').map(Number);\r\n    const [endHour, endMinute] = end.split(':').map(Number);\r\n    let currentTime = new Date(1970, 0, 1, startHour, startMinute);\r\n    const endTime = new Date(1970, 0, 1, endHour, endMinute);\r\n\r\n    while (currentTime <= endTime) {\r\n      times.push(currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }));\r\n      currentTime = new Date(currentTime.getTime() + interval * 60000); // interval in minutes\r\n    }\r\n\r\n    return times;\r\n  };\r\n\r\n  const getAvailableTimes = (day) => {\r\n    const dayAvailability = availability[day]; // Access availability for the specific day\r\n    if (!dayAvailability) return [];\r\n\r\n    let times = [];\r\n    \r\n    // If morning times are available\r\n    if (dayAvailability.morning && dayAvailability.morning.available) {\r\n      const morningTimes = generateTimeIntervals(\r\n        dayAvailability.morning.startTime,\r\n        dayAvailability.morning.endTime,\r\n        dayAvailability.morning.interval || 30 // Default to 30 minutes\r\n      );\r\n      times = times.concat(morningTimes);\r\n    }\r\n\r\n    // If afternoon times are available\r\n    if (dayAvailability.afternoon && dayAvailability.afternoon.available) {\r\n      const afternoonTimes = generateTimeIntervals(\r\n        dayAvailability.afternoon.startTime,\r\n        dayAvailability.afternoon.endTime,\r\n        dayAvailability.afternoon.interval || 30 // Default to 30 minutes\r\n      );\r\n      times = times.concat(afternoonTimes);\r\n    }\r\n\r\n    return times;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedDate && availability) {\r\n      const selectedDateObj = new Date(selectedDate);\r\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n      const day = daysOfWeek[selectedDateObj.getDay()];\r\n      const times = getAvailableTimes(day);\r\n      console.log(`Available Times for ${day}:`, times); \r\n      setAvailableTimes(times);\r\n    } else {\r\n      setAvailableTimes([]);\r\n    }\r\n  }, [selectedDate, availability]);\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Assign Appointment Details</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        \r\n        {/* Doctor Selection */}\r\n        <Form.Group controlId=\"formAssignDoctor\">\r\n          <Form.Label>Assign Doctor</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            value={selectedDoctor}\r\n            onChange={(e) => setSelectedDoctor(e.target.value)}\r\n          >\r\n            <option value=\"\">Select Doctor</option>\r\n            {alldoctors.map(doctor => (\r\n              <option key={doctor._id} value={doctor._id}>\r\n                {`${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`}\r\n              </option>\r\n            ))}\r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        {/* Date Selection */}\r\n        <Form.Group controlId=\"formAssignDate\">\r\n          <Form.Label>Assign Date</Form.Label>\r\n          <Form.Control\r\n            type=\"date\"\r\n            value={selectedDate}\r\n            onChange={(e) => setSelectedDate(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {/* Time Selection */}\r\n        <Form.Group controlId=\"formAssignTime\">\r\n          <Form.Label>Assign Time {manualTimeInput ? \"(Manual)\" : \"(From Available Slots)\"}</Form.Label>\r\n          {manualTimeInput ? (\r\n            // Manual time input when no doctor is selected\r\n            <Form.Control\r\n              type=\"time\"\r\n              value={selectedTime}\r\n              onChange={handleTimeChange}\r\n            />\r\n          ) : (\r\n            // Safeguard check if availableTimes is indeed an array\r\n            Array.isArray(availableTimes) && availableTimes.length > 0 ? (\r\n              <div>\r\n                {availableTimes.map(timeSlot => (\r\n                  <Button\r\n                    key={timeSlot}\r\n                    variant=\"outline-primary\"\r\n                    onClick={() => setSelectedTime(timeSlot)}\r\n                    disabled={bookedTimes.includes(timeSlot)} // Disable if the time slot is already booked\r\n                    className=\"m-1\"\r\n                  >\r\n                    {timeSlot}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <p>No available times for the selected date.</p>\r\n            )\r\n          )}\r\n        </Form.Group>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={handleSaveDetails}>\r\n          Save\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AssignAppointmentModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}