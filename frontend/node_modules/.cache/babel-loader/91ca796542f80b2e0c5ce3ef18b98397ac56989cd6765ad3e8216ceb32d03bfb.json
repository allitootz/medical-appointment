{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\patient\\\\doctorprofile\\\\AppointmentModal.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppointmentModal({\n  show,\n  handleClose,\n  pid,\n  did,\n  doctorName\n}) {\n  _s();\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [reason, setReason] = useState(\"\");\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const [availability, setAvailability] = useState({});\n  const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\n  const [doctorServices, setDoctorServices] = useState([]); // Services from dr_services or all services\n  const [selectedServices, setSelectedServices] = useState([]); // Store selected services (appointment_type)\n\n  // Fetch doctor's services (dr_services) or all services when the doctor is optional\n  useEffect(() => {\n    if (did) {\n      // If a doctor ID is provided, fetch the doctor's specific services\n      axios.get(`http://localhost:8000/doctor/${did}`).then(response => {\n        const doctor = response.data.doctor;\n        setDoctorServices(doctor.dr_services || []); // Assuming dr_services is populated\n        setAvailability(doctor.availability || {});\n        setActiveAppointmentStatus(doctor.activeAppointmentStatus);\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      // If no doctor ID, fetch all services\n      axios.get(`http://localhost:8000/admin/get/services`).then(response => {\n        setDoctorServices(response.data); // Assuming this returns all services\n        setActiveAppointmentStatus(true); // All services available for selection\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [did]);\n\n  // Function to handle checkbox change for services\n  const handleServiceChange = serviceId => {\n    setSelectedServices(prevSelected => {\n      if (prevSelected.includes(serviceId)) {\n        return prevSelected.filter(id => id !== serviceId); // Remove service if already selected\n      } else {\n        return [...prevSelected, serviceId]; // Add service if not selected\n      }\n    });\n  };\n\n  // Function to create an appointment\n  const createAppointment = () => {\n    if (!date) {\n      window.alert(\"Please select a valid date for the appointment.\");\n      return;\n    }\n\n    // Create the appointment data\n    const formData = {\n      doctor: did || null,\n      // doctorId can be null if optional\n      date,\n      time: time || null,\n      reason,\n      appointment_type: selectedServices // Send selected services as appointment_type\n    };\n    axios.post(`http://localhost:8000/patient/api/${pid}/createappointment`, formData).then(() => {\n      window.alert(\"Created an appointment!\");\n      window.location.reload();\n    }).catch(err => {\n      if (err.response) {\n        console.log(err.response.data);\n        window.alert(`Error: ${err.response.data.message}`);\n      } else {\n        console.log(err);\n        window.alert('An error occurred while creating the appointment.');\n      }\n    });\n  };\n  const getTodayDate = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  const getAvailableTimes = day => {\n    var _dayAvailability$morn, _dayAvailability$afte;\n    const dayAvailability = availability[day];\n    if (!dayAvailability) return [];\n    let times = [];\n    if ((_dayAvailability$morn = dayAvailability.morning) !== null && _dayAvailability$morn !== void 0 && _dayAvailability$morn.available) {\n      const morningTime = `${new Date(`1970-01-01T${dayAvailability.morning.startTime}`).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })} - ${new Date(`1970-01-01T${dayAvailability.morning.endTime}`).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })}`;\n      times.push({\n        label: \"Morning\",\n        timeRange: morningTime\n      });\n    }\n    if ((_dayAvailability$afte = dayAvailability.afternoon) !== null && _dayAvailability$afte !== void 0 && _dayAvailability$afte.available) {\n      const afternoonTime = `${new Date(`1970-01-01T${dayAvailability.afternoon.startTime}`).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })} - ${new Date(`1970-01-01T${dayAvailability.afternoon.endTime}`).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      })}`;\n      times.push({\n        label: \"Afternoon\",\n        timeRange: afternoonTime\n      });\n    }\n    return times;\n  };\n  useEffect(() => {\n    if (date) {\n      const selectedDate = new Date(date);\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      const day = daysOfWeek[selectedDate.getDay()];\n      setAvailableTimes(getAvailableTimes(day));\n    } else {\n      setAvailableTimes([]);\n    }\n  }, [date, did, availability]);\n  const todayDate = getTodayDate();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    className: \"am-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"am-content\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"am-header\",\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Book Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Your Doctor: \", doctorName || 'No Doctor Selected (Optional)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), activeAppointmentStatus ? /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"date\",\n                min: todayDate,\n                value: date,\n                onChange: e => setDate(e.target.value),\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 29\n          }, this), availableTimes.length > 0 && /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Time (Optional)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: availableTimes.map((timeSlot, index) => /*#__PURE__*/_jsxDEV(Button, {\n                  variant: time === timeSlot.timeRange ? \"secondary\" : \"outline-primary\",\n                  onClick: () => setTime(timeSlot.timeRange),\n                  className: \"m-1\",\n                  children: [timeSlot.label, \": \", timeSlot.timeRange]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 49\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Primary Concern\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"textarea\",\n                value: reason,\n                onChange: e => setReason(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Select Services (Appointment Type)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: doctorServices.map(service => /*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  label: service.name,\n                  onChange: () => handleServiceChange(service.name),\n                  checked: selectedServices.includes(service.name),\n                  disabled: service.availability === 'Not Available' || service.availability === 'Coming Soon'\n                }, service._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Doctor is not accepting appointments currently.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), activeAppointmentStatus && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: createAppointment,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(AppointmentModal, \"DWfxzPXkdERCCpBkaMALxtjy+pU=\");\n_c = AppointmentModal;\nexport default AppointmentModal;\nvar _c;\n$RefreshReg$(_c, \"AppointmentModal\");","map":{"version":3,"names":["axios","useState","useEffect","Row","Col","Button","Form","Modal","jsxDEV","_jsxDEV","AppointmentModal","show","handleClose","pid","did","doctorName","_s","date","setDate","time","setTime","reason","setReason","availableTimes","setAvailableTimes","availability","setAvailability","activeAppointmentStatus","setActiveAppointmentStatus","doctorServices","setDoctorServices","selectedServices","setSelectedServices","get","then","response","doctor","data","dr_services","catch","err","console","log","handleServiceChange","serviceId","prevSelected","includes","filter","id","createAppointment","window","alert","formData","appointment_type","post","location","reload","message","getTodayDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","getAvailableTimes","_dayAvailability$morn","_dayAvailability$afte","dayAvailability","times","morning","available","morningTime","startTime","toLocaleTimeString","hour","minute","endTime","push","label","timeRange","afternoon","afternoonTime","selectedDate","daysOfWeek","getDay","todayDate","onHide","className","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Group","as","Label","Control","type","min","value","onChange","e","target","required","length","map","timeSlot","index","variant","onClick","service","Check","name","checked","disabled","_id","Footer","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/patient/doctorprofile/AppointmentModal.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\r\n\r\nfunction AppointmentModal({ show, handleClose, pid, did, doctorName }) {\r\n    const [date, setDate] = useState(\"\");\r\n    const [time, setTime] = useState(\"\");\r\n    const [reason, setReason] = useState(\"\");\r\n    const [availableTimes, setAvailableTimes] = useState([]);\r\n    const [availability, setAvailability] = useState({});\r\n    const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\r\n    const [doctorServices, setDoctorServices] = useState([]); // Services from dr_services or all services\r\n    const [selectedServices, setSelectedServices] = useState([]); // Store selected services (appointment_type)\r\n\r\n    // Fetch doctor's services (dr_services) or all services when the doctor is optional\r\n    useEffect(() => {\r\n        if (did) {\r\n            // If a doctor ID is provided, fetch the doctor's specific services\r\n            axios.get(`http://localhost:8000/doctor/${did}`)\r\n                .then((response) => {\r\n                    const doctor = response.data.doctor;\r\n                    setDoctorServices(doctor.dr_services || []); // Assuming dr_services is populated\r\n                    setAvailability(doctor.availability || {});\r\n                    setActiveAppointmentStatus(doctor.activeAppointmentStatus);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            // If no doctor ID, fetch all services\r\n            axios.get(`http://localhost:8000/admin/get/services`)\r\n                .then((response) => {\r\n                    setDoctorServices(response.data); // Assuming this returns all services\r\n                    setActiveAppointmentStatus(true); // All services available for selection\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }, [did]);\r\n\r\n    // Function to handle checkbox change for services\r\n    const handleServiceChange = (serviceId) => {\r\n        setSelectedServices((prevSelected) => {\r\n            if (prevSelected.includes(serviceId)) {\r\n                return prevSelected.filter((id) => id !== serviceId); // Remove service if already selected\r\n            } else {\r\n                return [...prevSelected, serviceId]; // Add service if not selected\r\n            }\r\n        });\r\n    };\r\n\r\n    // Function to create an appointment\r\n    const createAppointment = () => {\r\n        if (!date) {\r\n            window.alert(\"Please select a valid date for the appointment.\");\r\n            return;\r\n        }\r\n\r\n        // Create the appointment data\r\n        const formData = {\r\n            doctor: did || null, // doctorId can be null if optional\r\n            date,\r\n            time: time || null,\r\n            reason,\r\n            appointment_type: selectedServices, // Send selected services as appointment_type\r\n        };\r\n\r\n        axios.post(`http://localhost:8000/patient/api/${pid}/createappointment`, formData)\r\n            .then(() => {\r\n                window.alert(\"Created an appointment!\");\r\n                window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response) {\r\n                    console.log(err.response.data);\r\n                    window.alert(`Error: ${err.response.data.message}`);\r\n                } else {\r\n                    console.log(err);\r\n                    window.alert('An error occurred while creating the appointment.');\r\n                }\r\n            });\r\n    };\r\n\r\n    const getTodayDate = () => {\r\n        const today = new Date();\r\n        const year = today.getFullYear();\r\n        const month = String(today.getMonth() + 1).padStart(2, '0');\r\n        const day = String(today.getDate()).padStart(2, '0');\r\n        return `${year}-${month}-${day}`;\r\n    };\r\n\r\n    const getAvailableTimes = (day) => {\r\n        const dayAvailability = availability[day];\r\n        if (!dayAvailability) return [];\r\n\r\n        let times = [];\r\n        if (dayAvailability.morning?.available) {\r\n            const morningTime = `${new Date(`1970-01-01T${dayAvailability.morning.startTime}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(`1970-01-01T${dayAvailability.morning.endTime}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n            times.push({ label: \"Morning\", timeRange: morningTime });\r\n        }\r\n\r\n        if (dayAvailability.afternoon?.available) {\r\n            const afternoonTime = `${new Date(`1970-01-01T${dayAvailability.afternoon.startTime}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${new Date(`1970-01-01T${dayAvailability.afternoon.endTime}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;\r\n            times.push({ label: \"Afternoon\", timeRange: afternoonTime });\r\n        }\r\n\r\n        return times;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (date) {\r\n            const selectedDate = new Date(date);\r\n            const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n            const day = daysOfWeek[selectedDate.getDay()];\r\n            setAvailableTimes(getAvailableTimes(day));\r\n        } else {\r\n            setAvailableTimes([]);\r\n        }\r\n    }, [date, did, availability]);\r\n\r\n    const todayDate = getTodayDate();\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} className='am-overlay'>\r\n            <div className=\"am-content\">\r\n                <Modal.Header className=\"am-header\" closeButton>\r\n                    <Modal.Title>Book Appointment</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>Your Doctor: {doctorName || 'No Doctor Selected (Optional)'}</p>\r\n                    {activeAppointmentStatus ? (\r\n                        <Form>\r\n                            <Row>\r\n                                <Form.Group as={Col} className=\"mb-3\">\r\n                                    <Form.Label>Date</Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"date\"\r\n                                        min={todayDate}\r\n                                        value={date}\r\n                                        onChange={(e) => setDate(e.target.value)}\r\n                                        required\r\n                                    />\r\n                                </Form.Group>\r\n                            </Row>\r\n\r\n                            {availableTimes.length > 0 && (\r\n                                <Row>\r\n                                    <Form.Group as={Col} className=\"mb-3\">\r\n                                        <Form.Label>Time (Optional)</Form.Label>\r\n                                        <div>\r\n                                            {availableTimes.map((timeSlot, index) => (\r\n                                                <Button\r\n                                                    key={index}\r\n                                                    variant={time === timeSlot.timeRange ? \"secondary\" : \"outline-primary\"}\r\n                                                    onClick={() => setTime(timeSlot.timeRange)}\r\n                                                    className=\"m-1\"\r\n                                                >\r\n                                                    {timeSlot.label}: {timeSlot.timeRange}\r\n                                                </Button>\r\n                                            ))}\r\n                                        </div>\r\n                                    </Form.Group>\r\n                                </Row>\r\n                            )}\r\n\r\n                            <Row>\r\n                                <Form.Group as={Col} className=\"mb-3\">\r\n                                    <Form.Label>Primary Concern</Form.Label>\r\n                                    <Form.Control\r\n                                        as=\"textarea\"\r\n                                        value={reason}\r\n                                        onChange={(e) => setReason(e.target.value)}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Row>\r\n\r\n                            {/* List services as checkboxes */} \r\n                            <Row>\r\n                                <Form.Group as={Col} className=\"mb-3\">\r\n                                    <Form.Label>Select Services (Appointment Type)</Form.Label>\r\n                                    <div>\r\n                                        {doctorServices.map(service => (\r\n                                            <Form.Check\r\n                                                key={service._id}\r\n                                                type=\"checkbox\"\r\n                                                label={service.name}\r\n                                                onChange={() => handleServiceChange(service.name)}\r\n                                                checked={selectedServices.includes(service.name)}\r\n                                                disabled={service.availability === 'Not Available' || service.availability === 'Coming Soon'}\r\n                                            />\r\n                                        ))}\r\n                                    </div>\r\n                                </Form.Group>\r\n                            </Row>\r\n                        </Form>\r\n                    ) : (\r\n                        <p>Doctor is not accepting appointments currently.</p>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    {activeAppointmentStatus && (\r\n                        <Button variant=\"primary\" onClick={createAppointment}>\r\n                            Submit\r\n                        </Button>\r\n                    )}\r\n                </Modal.Footer>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AppointmentModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}