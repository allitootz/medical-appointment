{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\frontend\\\\src\\\\components\\\\login\\\\ResetPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Form, Button, Container } from 'react-bootstrap';\nimport { ip } from '../../ContentExport';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const {\n    token,\n    role\n  } = useParams(); // Capture the role and token from URL params\n  const navigate = useNavigate();\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const handleResetPassword = async e => {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match.\");\n      return;\n    }\n    try {\n      // Determine the API endpoint based on the user role (Patient or Doctor)\n      const resetEndpoint = role === 'doctor' ? `${ip.address}/doctor/api/reset-password/${token}` : `${ip.address}/patient/api/reset-password/${token}`;\n      const response = await axios.post(resetEndpoint, {\n        password\n      });\n      setMessage(response.data.message);\n\n      // Redirect to login page after successful reset\n      setTimeout(() => {\n        navigate('/medapp/login');\n      }, 1000);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error in resetting password:', err);\n      setMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'An error occurred.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleResetPassword,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formNewPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          placeholder: \"Enter new password\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formConfirmPassword\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          placeholder: \"Confirm new password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPassword, \"BwYMGBOlqjq0EqFoLBzTNhITjCg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","axios","useParams","useNavigate","Form","Button","Container","ip","jsxDEV","_jsxDEV","ResetPassword","_s","token","role","navigate","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","handleResetPassword","e","preventDefault","resetEndpoint","address","response","post","data","setTimeout","err","_err$response","_err$response$data","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","target","variant","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/frontend/src/components/login/ResetPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { ip } from '../../ContentExport';\r\n\r\nconst ResetPassword = () => {\r\n    const { token, role } = useParams();  // Capture the role and token from URL params\r\n    const navigate = useNavigate();\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const handleResetPassword = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if (password !== confirmPassword) {\r\n            setMessage(\"Passwords do not match.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Determine the API endpoint based on the user role (Patient or Doctor)\r\n            const resetEndpoint = role === 'doctor' \r\n                ? `${ip.address}/doctor/api/reset-password/${token}` \r\n                : `${ip.address}/patient/api/reset-password/${token}`;\r\n\r\n            const response = await axios.post(resetEndpoint, { password });\r\n            setMessage(response.data.message);\r\n\r\n            // Redirect to login page after successful reset\r\n            setTimeout(() => {\r\n                navigate('/medapp/login');\r\n            }, 1000);\r\n        } catch (err) {\r\n            console.error('Error in resetting password:', err);\r\n            setMessage(err.response?.data?.message || 'An error occurred.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"mt-5\">\r\n            <h2>Reset Password</h2>\r\n            {message && <p>{message}</p>}\r\n            <Form onSubmit={handleResetPassword}>\r\n                <Form.Group className=\"mb-3\" controlId=\"formNewPassword\">\r\n                    <Form.Label>New Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formConfirmPassword\">\r\n                    <Form.Label>Confirm New Password</Form.Label>\r\n                    <Form.Control\r\n                        type=\"password\"\r\n                        placeholder=\"Confirm new password\"\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Reset Password\r\n                </Button>\r\n            </Form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}