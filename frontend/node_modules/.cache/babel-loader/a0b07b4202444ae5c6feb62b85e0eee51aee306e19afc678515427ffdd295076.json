{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\practitioner\\\\accountinfo\\\\modal\\\\ImageUploadModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport axios from 'axios';\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport './UploadImageModal.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nC;\nconst ImageUploadModal = ({\n  isOpen,\n  onRequestClose,\n  did\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null); // Original selected file\n  const [imageSrc, setImageSrc] = useState(null); // Preview of selected image\n  const [editedImage, setEditedImage] = useState(null); // Cropped image in base64\n\n  // Handle file selection and display a preview\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageSrc(reader.result); // Set the original file preview\n      setEditedImage(null); // Reset the cropped image\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Handle the cropped image (from CropResizeTiltModal)\n  const handleImageEdit = croppedImageSrc => {\n    setEditedImage(croppedImageSrc); // Set the cropped image (base64 format)\n  };\n\n  // Convert base64 to Blob\n  const dataURLtoBlob = dataurl => {\n    const arr = dataurl.split(',');\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], {\n      type: mime\n    });\n  };\n\n  // Handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n\n    // If the image is cropped, use the cropped image, otherwise use the selected file\n    if (editedImage) {\n      const croppedBlob = dataURLtoBlob(editedImage);\n      const file = new File([croppedBlob], 'cropped-image.png', {\n        type: 'image/png'\n      });\n      formData.append('image', file); // Add cropped image to formData\n    } else if (selectedFile) {\n      formData.append('image', selectedFile); // Add the original selected image\n    }\n    try {\n      const response = await axios.post(`http://localhost:8000/doctor/api/${did}/updateimage`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Image uploaded successfully:', response.data);\n      onRequestClose(response.data.updatedDoctor.dr_image); // Pass the new image URL back to the parent component\n    } catch (error) {\n      console.error('Error uploading image:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: () => onRequestClose(null),\n    contentLabel: \"Image Upload Modal\",\n    className: \"image-upload-modal\",\n    overlayClassName: \"modal-overlay\",\n    ariaHideApp: false,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"ium-form\",\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), imageSrc && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setEditedImage(imageSrc),\n          children: \"Edit Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: editedImage || imageSrc,\n          alt: \"Preview\",\n          className: \"preview-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: \"15px\"\n        },\n        type: \"submit\",\n        onClick: handleSubmit,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploadModal, \"FxOdGGwA2VTYnOZWMUxfbN66DAo=\");\n_c = ImageUploadModal;\nexport default ImageUploadModal;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadModal\");","map":{"version":3,"names":["React","useState","Modal","axios","Button","Form","Col","jsxDEV","_jsxDEV","Fragment","_Fragment","C","ImageUploadModal","isOpen","onRequestClose","did","_s","selectedFile","setSelectedFile","imageSrc","setImageSrc","editedImage","setEditedImage","handleFileChange","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","handleImageEdit","croppedImageSrc","dataURLtoBlob","dataurl","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","handleSubmit","preventDefault","formData","FormData","croppedBlob","File","append","response","post","headers","console","log","data","updatedDoctor","dr_image","error","contentLabel","className","overlayClassName","ariaHideApp","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","as","Control","accept","onChange","onClick","src","alt","style","marginTop","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/practitioner/accountinfo/modal/ImageUploadModal.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport axios from 'axios';\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\nimport './UploadImageModal.css';\r\nC\r\nconst ImageUploadModal = ({ isOpen, onRequestClose, did }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null); // Original selected file\r\n  const [imageSrc, setImageSrc] = useState(null); // Preview of selected image\r\n  const [editedImage, setEditedImage] = useState(null); // Cropped image in base64\r\n\r\n  // Handle file selection and display a preview\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImageSrc(reader.result); // Set the original file preview\r\n      setEditedImage(null); // Reset the cropped image\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Handle the cropped image (from CropResizeTiltModal)\r\n  const handleImageEdit = (croppedImageSrc) => {\r\n    setEditedImage(croppedImageSrc); // Set the cropped image (base64 format)\r\n  };\r\n\r\n  // Convert base64 to Blob\r\n  const dataURLtoBlob = (dataurl) => {\r\n    const arr = dataurl.split(',');\r\n    const mime = arr[0].match(/:(.*?);/)[1];\r\n    const bstr = atob(arr[1]);\r\n    let n = bstr.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n--) {\r\n      u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new Blob([u8arr], { type: mime });\r\n  };\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData();\r\n\r\n    // If the image is cropped, use the cropped image, otherwise use the selected file\r\n    if (editedImage) {\r\n      const croppedBlob = dataURLtoBlob(editedImage);\r\n      const file = new File([croppedBlob], 'cropped-image.png', { type: 'image/png' });\r\n      formData.append('image', file); // Add cropped image to formData\r\n    } else if (selectedFile) {\r\n      formData.append('image', selectedFile); // Add the original selected image\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:8000/doctor/api/${did}/updateimage`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      console.log('Image uploaded successfully:', response.data);\r\n      onRequestClose(response.data.updatedDoctor.dr_image); // Pass the new image URL back to the parent component\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={() => onRequestClose(null)}\r\n      contentLabel=\"Image Upload Modal\"\r\n      className=\"image-upload-modal\" \r\n      overlayClassName=\"modal-overlay\" \r\n      ariaHideApp={false} \r\n    >\r\n      <div className=\"modal-content\">\r\n        <h2>Upload Image</h2>\r\n        <Form className='ium-form'>\r\n          <Form.Group as={Col} className=\"mb-3\">\r\n            <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        {imageSrc && (\r\n          <>\r\n            <Button onClick={() => setEditedImage(imageSrc)}>Edit Image</Button>\r\n            <img src={editedImage || imageSrc} alt=\"Preview\" className=\"preview-image\" />\r\n          </>\r\n        )}\r\n\r\n        <Button style={{ marginTop: \"15px\" }} type=\"submit\" onClick={handleSubmit}>Upload</Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ImageUploadModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}