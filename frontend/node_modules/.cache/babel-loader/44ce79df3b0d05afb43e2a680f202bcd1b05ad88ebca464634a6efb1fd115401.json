{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\staffs\\\\medical secretary\\\\components\\\\Manage Doctors\\\\DoctorScheduleManagement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Form, Button, Row, Col, Card, Toast, ToastContainer } from 'react-bootstrap';\nimport { useLocation, useParams } from 'react-router-dom';\nimport './Styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialTimeSlot = {\n  startTime: '',\n  endTime: '',\n  available: false\n};\nconst initialAvailability = {\n  monday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  tuesday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  wednesday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  thursday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  friday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  saturday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  },\n  sunday: {\n    morning: {\n      ...initialTimeSlot\n    },\n    afternoon: {\n      ...initialTimeSlot\n    }\n  }\n};\nfunction DoctorScheduleManagement() {\n  _s();\n  const location = useLocation();\n  const {\n    did\n  } = location.state; // Get the doctor ID from the route parameters\n\n  const [availability, setAvailability] = useState(initialAvailability);\n  const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\n  const [docInfo, setDocInfo] = useState(null); // Initialize with null\n  const [error, setError] = useState(''); // To handle validation errors\n  const [showToast, setShowToast] = useState(false); // Toast visibility state\n\n  // Fetch doctor information and availability\n  useEffect(() => {\n    const fetchDoctorData = async () => {\n      try {\n        const res = await axios.get(`http://localhost:8000/doctor/one/${did}`);\n        setDocInfo(res.data.doctor); // Set the doctor info state\n\n        const availabilityRes = await axios.get(`http://localhost:8000/doctor/${did}/available`);\n        const {\n          availability,\n          activeAppointmentStatus\n        } = availabilityRes.data;\n        setAvailability(availability || initialAvailability);\n        setActiveAppointmentStatus(activeAppointmentStatus);\n      } catch (err) {\n        console.error('Error fetching doctor data:', err);\n      }\n    };\n    fetchDoctorData();\n  }, [did]);\n  const handleTimeChange = (day, period, field, value) => {\n    setAvailability(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        [period]: {\n          ...prev[day][period],\n          [field]: value\n        }\n      }\n    }));\n  };\n  const handleAvailabilityChange = (day, period, value) => {\n    setAvailability(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        [period]: {\n          available: value\n        }\n      }\n    }));\n  };\n\n  // Validate start and end times for all available slots\n  const validateAvailability = () => {\n    for (const day of Object.keys(availability)) {\n      const periods = ['morning', 'afternoon'];\n      for (const period of periods) {\n        const slot = availability[day][period];\n        if (slot.available) {\n          // Check if both start and end times are set\n          if (!slot.startTime || !slot.endTime) {\n            return `${day.charAt(0).toUpperCase() + day.slice(1)}: Start and End times must be set for ${period}`;\n          }\n          // Check if start time is before end time\n          if (slot.startTime >= slot.endTime) {\n            return `${day.charAt(0).toUpperCase() + day.slice(1)}: Start time must be earlier than End time for ${period}`;\n          }\n        }\n      }\n    }\n    return '';\n  };\n  const handleSubmit = async () => {\n    const validationError = validateAvailability();\n    if (validationError) {\n      setError(validationError);\n      setShowToast(true); // Show toast on error\n      return;\n    }\n    setError(''); // Clear error if no validation issues\n    setShowToast(false); // Hide toast if no error\n\n    try {\n      await axios.put(`http://localhost:8000/doctor/${did}/availability`, {\n        availability\n      });\n      alert('Availability updated successfully');\n    } catch (err) {\n      console.error('Error updating availability:', err);\n    }\n  };\n  const handleStatusChange = async () => {\n    try {\n      await axios.put(`http://localhost:8000/doctor/${did}/appointmentstatus`, {\n        activeAppointmentStatus: !activeAppointmentStatus\n      });\n      setActiveAppointmentStatus(!activeAppointmentStatus);\n    } catch (err) {\n      console.error('Error updating appointment status:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"bottom-end\",\n      className: \"p-3 margin-right\",\n      children: /*#__PURE__*/_jsxDEV(Toast, {\n        onClose: () => setShowToast(false),\n        show: showToast,\n        bg: \"danger\",\n        delay: 5000,\n        autohide: true,\n        children: [/*#__PURE__*/_jsxDEV(Toast.Header, {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            className: \"me-auto\",\n            children: \"Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Toast.Body, {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"shadow-sm mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        as: \"h5\",\n        children: \"Appointments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"dsm-card\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [Object.keys(availability).map(day => {\n            var _availability$day, _availability$day$mor, _availability$day2, _availability$day2$mo, _availability$day3, _availability$day3$mo, _availability$day4, _availability$day4$mo, _availability$day5, _availability$day5$af, _availability$day6, _availability$day6$af, _availability$day7, _availability$day7$af, _availability$day8, _availability$day8$af;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: day.charAt(0).toUpperCase() + day.slice(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}MorningAvailable`,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"checkbox\",\n                      label: \"Available in the morning\",\n                      checked: ((_availability$day = availability[day]) === null || _availability$day === void 0 ? void 0 : (_availability$day$mor = _availability$day.morning) === null || _availability$day$mor === void 0 ? void 0 : _availability$day$mor.available) || false,\n                      onChange: e => handleAvailabilityChange(day, 'morning', e.target.checked)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 33\n              }, this), ((_availability$day2 = availability[day]) === null || _availability$day2 === void 0 ? void 0 : (_availability$day2$mo = _availability$day2.morning) === null || _availability$day2$mo === void 0 ? void 0 : _availability$day2$mo.available) && /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}MorningStartTime`,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Morning Start Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"time\",\n                      value: ((_availability$day3 = availability[day]) === null || _availability$day3 === void 0 ? void 0 : (_availability$day3$mo = _availability$day3.morning) === null || _availability$day3$mo === void 0 ? void 0 : _availability$day3$mo.startTime) || '',\n                      onChange: e => handleTimeChange(day, 'morning', 'startTime', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 156,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}MorningEndTime`,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Morning End Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"time\",\n                      value: ((_availability$day4 = availability[day]) === null || _availability$day4 === void 0 ? void 0 : (_availability$day4$mo = _availability$day4.morning) === null || _availability$day4$mo === void 0 ? void 0 : _availability$day4$mo.endTime) || '',\n                      onChange: e => handleTimeChange(day, 'morning', 'endTime', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 164,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}AfternoonAvailable`,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"checkbox\",\n                      label: \"Available in the afternoon\",\n                      checked: ((_availability$day5 = availability[day]) === null || _availability$day5 === void 0 ? void 0 : (_availability$day5$af = _availability$day5.afternoon) === null || _availability$day5$af === void 0 ? void 0 : _availability$day5$af.available) || false,\n                      onChange: e => handleAvailabilityChange(day, 'afternoon', e.target.checked)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 33\n              }, this), ((_availability$day6 = availability[day]) === null || _availability$day6 === void 0 ? void 0 : (_availability$day6$af = _availability$day6.afternoon) === null || _availability$day6$af === void 0 ? void 0 : _availability$day6$af.available) && /*#__PURE__*/_jsxDEV(Row, {\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}AfternoonStartTime`,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Afternoon Start Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"time\",\n                      value: ((_availability$day7 = availability[day]) === null || _availability$day7 === void 0 ? void 0 : (_availability$day7$af = _availability$day7.afternoon) === null || _availability$day7$af === void 0 ? void 0 : _availability$day7$af.startTime) || '',\n                      onChange: e => handleTimeChange(day, 'afternoon', 'startTime', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 192,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                    controlId: `${day}AfternoonEndTime`,\n                    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                      children: \"Afternoon End Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 201,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"time\",\n                      value: ((_availability$day8 = availability[day]) === null || _availability$day8 === void 0 ? void 0 : (_availability$day8$af = _availability$day8.afternoon) === null || _availability$day8$af === void 0 ? void 0 : _availability$day8$af.endTime) || '',\n                      onChange: e => handleTimeChange(day, 'afternoon', 'endTime', e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 37\n              }, this)]\n            }, day, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleSubmit,\n            className: \"me-2\",\n            children: \"Save Availability\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeAppointmentStatus ? \"danger\" : \"success\",\n            onClick: handleStatusChange,\n            children: activeAppointmentStatus ? 'Deactivate Appointments' : 'Activate Appointments'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(DoctorScheduleManagement, \"xPcjbSgcbeZUEMS+srYxXZitI18=\", false, function () {\n  return [useLocation];\n});\n_c = DoctorScheduleManagement;\nexport default DoctorScheduleManagement;\nvar _c;\n$RefreshReg$(_c, \"DoctorScheduleManagement\");","map":{"version":3,"names":["React","useState","useEffect","axios","Form","Button","Row","Col","Card","Toast","ToastContainer","useLocation","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","initialTimeSlot","startTime","endTime","available","initialAvailability","monday","morning","afternoon","tuesday","wednesday","thursday","friday","saturday","sunday","DoctorScheduleManagement","_s","location","did","state","availability","setAvailability","activeAppointmentStatus","setActiveAppointmentStatus","docInfo","setDocInfo","error","setError","showToast","setShowToast","fetchDoctorData","res","get","data","doctor","availabilityRes","err","console","handleTimeChange","day","period","field","value","prev","handleAvailabilityChange","validateAvailability","Object","keys","periods","slot","charAt","toUpperCase","slice","handleSubmit","validationError","put","alert","handleStatusChange","children","position","className","onClose","show","bg","delay","autohide","Header","fileName","_jsxFileName","lineNumber","columnNumber","Body","as","map","_availability$day","_availability$day$mor","_availability$day2","_availability$day2$mo","_availability$day3","_availability$day3$mo","_availability$day4","_availability$day4$mo","_availability$day5","_availability$day5$af","_availability$day6","_availability$day6$af","_availability$day7","_availability$day7$af","_availability$day8","_availability$day8$af","Group","controlId","Check","type","label","checked","onChange","e","target","Label","Control","variant","onClick","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/staffs/medical secretary/components/Manage Doctors/DoctorScheduleManagement.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Form, Button, Row, Col, Card, Toast, ToastContainer } from 'react-bootstrap';\r\nimport { useLocation, useParams } from 'react-router-dom';\r\nimport './Styles.css';\r\nconst initialTimeSlot = { startTime: '', endTime: '', available: false };\r\n\r\nconst initialAvailability = {\r\n    monday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    tuesday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    wednesday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    thursday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    friday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    saturday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n    sunday: { morning: { ...initialTimeSlot }, afternoon: { ...initialTimeSlot } },\r\n};\r\n\r\nfunction DoctorScheduleManagement() {\r\n    const location = useLocation();\r\n    const { did } = location.state; // Get the doctor ID from the route parameters\r\n    \r\n    const [availability, setAvailability] = useState(initialAvailability);\r\n    const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\r\n    const [docInfo, setDocInfo] = useState(null);  // Initialize with null\r\n    const [error, setError] = useState(''); // To handle validation errors\r\n    const [showToast, setShowToast] = useState(false); // Toast visibility state\r\n\r\n    // Fetch doctor information and availability\r\n    useEffect(() => {\r\n        const fetchDoctorData = async () => {\r\n            try {\r\n                const res = await axios.get(`http://localhost:8000/doctor/one/${did}`);\r\n                setDocInfo(res.data.doctor);  // Set the doctor info state\r\n                \r\n                const availabilityRes = await axios.get(`http://localhost:8000/doctor/${did}/available`);\r\n                const { availability, activeAppointmentStatus } = availabilityRes.data;\r\n                setAvailability(availability || initialAvailability);\r\n                setActiveAppointmentStatus(activeAppointmentStatus);\r\n            } catch (err) {\r\n                console.error('Error fetching doctor data:', err);\r\n            }\r\n        };\r\n\r\n        fetchDoctorData();\r\n    }, [did]);\r\n\r\n    const handleTimeChange = (day, period, field, value) => {\r\n        setAvailability(prev => ({\r\n            ...prev,\r\n            [day]: {\r\n                ...prev[day],\r\n                [period]: {\r\n                    ...prev[day][period],\r\n                    [field]: value\r\n                }\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleAvailabilityChange = (day, period, value) => {\r\n        setAvailability(prev => ({\r\n            ...prev,\r\n            [day]: {\r\n                ...prev[day],\r\n                [period]: {\r\n                    available: value\r\n                }\r\n            }\r\n        }));\r\n    };\r\n\r\n    // Validate start and end times for all available slots\r\n    const validateAvailability = () => {\r\n        for (const day of Object.keys(availability)) {\r\n            const periods = ['morning', 'afternoon'];\r\n            for (const period of periods) {\r\n                const slot = availability[day][period];\r\n                if (slot.available) {\r\n                    // Check if both start and end times are set\r\n                    if (!slot.startTime || !slot.endTime) {\r\n                        return `${day.charAt(0).toUpperCase() + day.slice(1)}: Start and End times must be set for ${period}`;\r\n                    }\r\n                    // Check if start time is before end time\r\n                    if (slot.startTime >= slot.endTime) {\r\n                        return `${day.charAt(0).toUpperCase() + day.slice(1)}: Start time must be earlier than End time for ${period}`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        const validationError = validateAvailability();\r\n        if (validationError) {\r\n            setError(validationError);\r\n            setShowToast(true); // Show toast on error\r\n            return;\r\n        }\r\n        setError(''); // Clear error if no validation issues\r\n        setShowToast(false); // Hide toast if no error\r\n\r\n        try {\r\n            await axios.put(`http://localhost:8000/doctor/${did}/availability`, { availability });\r\n            alert('Availability updated successfully');\r\n        } catch (err) {\r\n            console.error('Error updating availability:', err);\r\n        }\r\n    };\r\n\r\n    const handleStatusChange = async () => {\r\n        try {\r\n            await axios.put(`http://localhost:8000/doctor/${did}/appointmentstatus`, { activeAppointmentStatus: !activeAppointmentStatus });\r\n            setActiveAppointmentStatus(!activeAppointmentStatus);\r\n        } catch (err) {\r\n            console.error('Error updating appointment status:', err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Toast Notification for errors */}\r\n            <ToastContainer position=\"bottom-end\" className=\"p-3 margin-right\">\r\n                <Toast onClose={() => setShowToast(false)} show={showToast} bg=\"danger\" delay={5000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className=\"me-auto\">Error</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>{error}</Toast.Body>\r\n                </Toast>\r\n            </ToastContainer>\r\n\r\n            <Card className=\"shadow-sm mt-4\">\r\n                <Card.Header as=\"h5\">Appointments</Card.Header>\r\n                <Card.Body className='dsm-card'>\r\n                    <Form>\r\n                        {Object.keys(availability).map(day => (\r\n                            <div key={day} className=\"mb-4\">\r\n                                <h4>{day.charAt(0).toUpperCase() + day.slice(1)}</h4>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group controlId={`${day}MorningAvailable`}>\r\n                                            <Form.Check \r\n                                                type=\"checkbox\"\r\n                                                label=\"Available in the morning\"\r\n                                                checked={availability[day]?.morning?.available || false}\r\n                                                onChange={(e) => handleAvailabilityChange(day, 'morning', e.target.checked)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                {availability[day]?.morning?.available && (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group controlId={`${day}MorningStartTime`}>\r\n                                                <Form.Label>Morning Start Time</Form.Label>\r\n                                                <Form.Control \r\n                                                    type=\"time\" \r\n                                                    value={availability[day]?.morning?.startTime || ''} \r\n                                                    onChange={(e) => handleTimeChange(day, 'morning', 'startTime', e.target.value)} \r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Form.Group controlId={`${day}MorningEndTime`}>\r\n                                                <Form.Label>Morning End Time</Form.Label>\r\n                                                <Form.Control \r\n                                                    type=\"time\" \r\n                                                    value={availability[day]?.morning?.endTime || ''} \r\n                                                    onChange={(e) => handleTimeChange(day, 'morning', 'endTime', e.target.value)} \r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group controlId={`${day}AfternoonAvailable`}>\r\n                                            <Form.Check \r\n                                                type=\"checkbox\"\r\n                                                label=\"Available in the afternoon\"\r\n                                                checked={availability[day]?.afternoon?.available || false}\r\n                                                onChange={(e) => handleAvailabilityChange(day, 'afternoon', e.target.checked)}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                {availability[day]?.afternoon?.available && (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Form.Group controlId={`${day}AfternoonStartTime`}>\r\n                                                <Form.Label>Afternoon Start Time</Form.Label>\r\n                                                <Form.Control \r\n                                                    type=\"time\" \r\n                                                    value={availability[day]?.afternoon?.startTime || ''} \r\n                                                    onChange={(e) => handleTimeChange(day, 'afternoon', 'startTime', e.target.value)} \r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Form.Group controlId={`${day}AfternoonEndTime`}>\r\n                                                <Form.Label>Afternoon End Time</Form.Label>\r\n                                                <Form.Control \r\n                                                    type=\"time\" \r\n                                                    value={availability[day]?.afternoon?.endTime || ''} \r\n                                                    onChange={(e) => handleTimeChange(day, 'afternoon', 'endTime', e.target.value)} \r\n                                                />\r\n                                            </Form.Group>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                        <Button variant=\"primary\" onClick={handleSubmit} className=\"me-2\">Save Availability</Button>\r\n                        <Button variant={activeAppointmentStatus ? \"danger\" : \"success\"} onClick={handleStatusChange}>\r\n                            {activeAppointmentStatus ? 'Deactivate Appointments' : 'Activate Appointments'}\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DoctorScheduleManagement;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,QAAQ,iBAAiB;AACrF,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACtB,MAAMC,eAAe,GAAG;EAAEC,SAAS,EAAE,EAAE;EAAEC,OAAO,EAAE,EAAE;EAAEC,SAAS,EAAE;AAAM,CAAC;AAExE,MAAMC,mBAAmB,GAAG;EACxBC,MAAM,EAAE;IAAEC,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EAC9EQ,OAAO,EAAE;IAAEF,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EAC/ES,SAAS,EAAE;IAAEH,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EACjFU,QAAQ,EAAE;IAAEJ,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EAChFW,MAAM,EAAE;IAAEL,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EAC9EY,QAAQ,EAAE;IAAEN,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE,CAAC;EAChFa,MAAM,EAAE;IAAEP,OAAO,EAAE;MAAE,GAAGN;IAAgB,CAAC;IAAEO,SAAS,EAAE;MAAE,GAAGP;IAAgB;EAAE;AACjF,CAAC;AAED,SAASc,wBAAwBA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEuB;EAAI,CAAC,GAAGD,QAAQ,CAACE,KAAK,CAAC,CAAC;;EAEhC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAACoB,mBAAmB,CAAC;EACrE,MAAM,CAACiB,uBAAuB,EAAEC,0BAA0B,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EAC5E,MAAM,CAACuC,OAAO,EAAEC,UAAU,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC/C,MAAM,CAACyC,KAAK,EAAEC,QAAQ,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAAC2C,SAAS,EAAEC,YAAY,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAM4C,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,GAAG,GAAG,MAAM5C,KAAK,CAAC6C,GAAG,CAAC,oCAAoCd,GAAG,EAAE,CAAC;QACtEO,UAAU,CAACM,GAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAE;;QAE9B,MAAMC,eAAe,GAAG,MAAMhD,KAAK,CAAC6C,GAAG,CAAC,gCAAgCd,GAAG,YAAY,CAAC;QACxF,MAAM;UAAEE,YAAY;UAAEE;QAAwB,CAAC,GAAGa,eAAe,CAACF,IAAI;QACtEZ,eAAe,CAACD,YAAY,IAAIf,mBAAmB,CAAC;QACpDkB,0BAA0B,CAACD,uBAAuB,CAAC;MACvD,CAAC,CAAC,OAAOc,GAAG,EAAE;QACVC,OAAO,CAACX,KAAK,CAAC,6BAA6B,EAAEU,GAAG,CAAC;MACrD;IACJ,CAAC;IAEDN,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,CAACZ,GAAG,CAAC,CAAC;EAET,MAAMoB,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,KAAK;IACpDrB,eAAe,CAACsB,IAAI,KAAK;MACrB,GAAGA,IAAI;MACP,CAACJ,GAAG,GAAG;QACH,GAAGI,IAAI,CAACJ,GAAG,CAAC;QACZ,CAACC,MAAM,GAAG;UACN,GAAGG,IAAI,CAACJ,GAAG,CAAC,CAACC,MAAM,CAAC;UACpB,CAACC,KAAK,GAAGC;QACb;MACJ;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAME,wBAAwB,GAAGA,CAACL,GAAG,EAAEC,MAAM,EAAEE,KAAK,KAAK;IACrDrB,eAAe,CAACsB,IAAI,KAAK;MACrB,GAAGA,IAAI;MACP,CAACJ,GAAG,GAAG;QACH,GAAGI,IAAI,CAACJ,GAAG,CAAC;QACZ,CAACC,MAAM,GAAG;UACNpC,SAAS,EAAEsC;QACf;MACJ;IACJ,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMG,oBAAoB,GAAGA,CAAA,KAAM;IAC/B,KAAK,MAAMN,GAAG,IAAIO,MAAM,CAACC,IAAI,CAAC3B,YAAY,CAAC,EAAE;MACzC,MAAM4B,OAAO,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC;MACxC,KAAK,MAAMR,MAAM,IAAIQ,OAAO,EAAE;QAC1B,MAAMC,IAAI,GAAG7B,YAAY,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC;QACtC,IAAIS,IAAI,CAAC7C,SAAS,EAAE;UAChB;UACA,IAAI,CAAC6C,IAAI,CAAC/C,SAAS,IAAI,CAAC+C,IAAI,CAAC9C,OAAO,EAAE;YAClC,OAAO,GAAGoC,GAAG,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGZ,GAAG,CAACa,KAAK,CAAC,CAAC,CAAC,yCAAyCZ,MAAM,EAAE;UACzG;UACA;UACA,IAAIS,IAAI,CAAC/C,SAAS,IAAI+C,IAAI,CAAC9C,OAAO,EAAE;YAChC,OAAO,GAAGoC,GAAG,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGZ,GAAG,CAACa,KAAK,CAAC,CAAC,CAAC,kDAAkDZ,MAAM,EAAE;UAClH;QACJ;MACJ;IACJ;IACA,OAAO,EAAE;EACb,CAAC;EAED,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,MAAMC,eAAe,GAAGT,oBAAoB,CAAC,CAAC;IAC9C,IAAIS,eAAe,EAAE;MACjB3B,QAAQ,CAAC2B,eAAe,CAAC;MACzBzB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;MACpB;IACJ;IACAF,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACdE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;;IAErB,IAAI;MACA,MAAM1C,KAAK,CAACoE,GAAG,CAAC,gCAAgCrC,GAAG,eAAe,EAAE;QAAEE;MAAa,CAAC,CAAC;MACrFoC,KAAK,CAAC,mCAAmC,CAAC;IAC9C,CAAC,CAAC,OAAOpB,GAAG,EAAE;MACVC,OAAO,CAACX,KAAK,CAAC,8BAA8B,EAAEU,GAAG,CAAC;IACtD;EACJ,CAAC;EAED,MAAMqB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACA,MAAMtE,KAAK,CAACoE,GAAG,CAAC,gCAAgCrC,GAAG,oBAAoB,EAAE;QAAEI,uBAAuB,EAAE,CAACA;MAAwB,CAAC,CAAC;MAC/HC,0BAA0B,CAAC,CAACD,uBAAuB,CAAC;IACxD,CAAC,CAAC,OAAOc,GAAG,EAAE;MACVC,OAAO,CAACX,KAAK,CAAC,oCAAoC,EAAEU,GAAG,CAAC;IAC5D;EACJ,CAAC;EAED,oBACItC,OAAA,CAAAE,SAAA;IAAA0D,QAAA,gBAEI5D,OAAA,CAACJ,cAAc;MAACiE,QAAQ,EAAC,YAAY;MAACC,SAAS,EAAC,kBAAkB;MAAAF,QAAA,eAC9D5D,OAAA,CAACL,KAAK;QAACoE,OAAO,EAAEA,CAAA,KAAMhC,YAAY,CAAC,KAAK,CAAE;QAACiC,IAAI,EAAElC,SAAU;QAACmC,EAAE,EAAC,QAAQ;QAACC,KAAK,EAAE,IAAK;QAACC,QAAQ;QAAAP,QAAA,gBACzF5D,OAAA,CAACL,KAAK,CAACyE,MAAM;UAAAR,QAAA,eACT5D,OAAA;YAAQ8D,SAAS,EAAC,SAAS;YAAAF,QAAA,EAAC;UAAK;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC,eACfxE,OAAA,CAACL,KAAK,CAAC8E,IAAI;UAAAb,QAAA,EAAEhC;QAAK;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eAEjBxE,OAAA,CAACN,IAAI;MAACoE,SAAS,EAAC,gBAAgB;MAAAF,QAAA,gBAC5B5D,OAAA,CAACN,IAAI,CAAC0E,MAAM;QAACM,EAAE,EAAC,IAAI;QAAAd,QAAA,EAAC;MAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAC/CxE,OAAA,CAACN,IAAI,CAAC+E,IAAI;QAACX,SAAS,EAAC,UAAU;QAAAF,QAAA,eAC3B5D,OAAA,CAACV,IAAI;UAAAsE,QAAA,GACAZ,MAAM,CAACC,IAAI,CAAC3B,YAAY,CAAC,CAACqD,GAAG,CAAClC,GAAG;YAAA,IAAAmC,iBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA;YAAA,oBAC9B3F,OAAA;cAAe8D,SAAS,EAAC,MAAM;cAAAF,QAAA,gBAC3B5D,OAAA;gBAAA4D,QAAA,EAAKnB,GAAG,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGZ,GAAG,CAACa,KAAK,CAAC,CAAC;cAAC;gBAAAe,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACrDxE,OAAA,CAACR,GAAG;gBAAAoE,QAAA,eACA5D,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,kBAAmB;oBAAAmB,QAAA,eAC5C5D,OAAA,CAACV,IAAI,CAACwG,KAAK;sBACPC,IAAI,EAAC,UAAU;sBACfC,KAAK,EAAC,0BAA0B;sBAChCC,OAAO,EAAE,EAAArB,iBAAA,GAAAtD,YAAY,CAACmB,GAAG,CAAC,cAAAmC,iBAAA,wBAAAC,qBAAA,GAAjBD,iBAAA,CAAmBnE,OAAO,cAAAoE,qBAAA,uBAA1BA,qBAAA,CAA4BvE,SAAS,KAAI,KAAM;sBACxD4F,QAAQ,EAAGC,CAAC,IAAKrD,wBAAwB,CAACL,GAAG,EAAE,SAAS,EAAE0D,CAAC,CAACC,MAAM,CAACH,OAAO;oBAAE;sBAAA5B,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC/E;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,EACL,EAAAM,kBAAA,GAAAxD,YAAY,CAACmB,GAAG,CAAC,cAAAqC,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBrE,OAAO,cAAAsE,qBAAA,uBAA1BA,qBAAA,CAA4BzE,SAAS,kBAClCN,OAAA,CAACR,GAAG;gBAAAoE,QAAA,gBACA5D,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,kBAAmB;oBAAAmB,QAAA,gBAC5C5D,OAAA,CAACV,IAAI,CAAC+G,KAAK;sBAAAzC,QAAA,EAAC;oBAAkB;sBAAAS,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,eAC3CxE,OAAA,CAACV,IAAI,CAACgH,OAAO;sBACTP,IAAI,EAAC,MAAM;sBACXnD,KAAK,EAAE,EAAAoC,kBAAA,GAAA1D,YAAY,CAACmB,GAAG,CAAC,cAAAuC,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBvE,OAAO,cAAAwE,qBAAA,uBAA1BA,qBAAA,CAA4B7E,SAAS,KAAI,EAAG;sBACnD8F,QAAQ,EAAGC,CAAC,IAAK3D,gBAAgB,CAACC,GAAG,EAAE,SAAS,EAAE,WAAW,EAAE0D,CAAC,CAACC,MAAM,CAACxD,KAAK;oBAAE;sBAAAyB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ,CAAC,eACNxE,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,gBAAiB;oBAAAmB,QAAA,gBAC1C5D,OAAA,CAACV,IAAI,CAAC+G,KAAK;sBAAAzC,QAAA,EAAC;oBAAgB;sBAAAS,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,eACzCxE,OAAA,CAACV,IAAI,CAACgH,OAAO;sBACTP,IAAI,EAAC,MAAM;sBACXnD,KAAK,EAAE,EAAAsC,kBAAA,GAAA5D,YAAY,CAACmB,GAAG,CAAC,cAAAyC,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBzE,OAAO,cAAA0E,qBAAA,uBAA1BA,qBAAA,CAA4B9E,OAAO,KAAI,EAAG;sBACjD6F,QAAQ,EAAGC,CAAC,IAAK3D,gBAAgB,CAACC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE0D,CAAC,CAACC,MAAM,CAACxD,KAAK;oBAAE;sBAAAyB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAChF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CACR,eACDxE,OAAA,CAACR,GAAG;gBAAAoE,QAAA,eACA5D,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,oBAAqB;oBAAAmB,QAAA,eAC9C5D,OAAA,CAACV,IAAI,CAACwG,KAAK;sBACPC,IAAI,EAAC,UAAU;sBACfC,KAAK,EAAC,4BAA4B;sBAClCC,OAAO,EAAE,EAAAb,kBAAA,GAAA9D,YAAY,CAACmB,GAAG,CAAC,cAAA2C,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmB1E,SAAS,cAAA2E,qBAAA,uBAA5BA,qBAAA,CAA8B/E,SAAS,KAAI,KAAM;sBAC1D4F,QAAQ,EAAGC,CAAC,IAAKrD,wBAAwB,CAACL,GAAG,EAAE,WAAW,EAAE0D,CAAC,CAACC,MAAM,CAACH,OAAO;oBAAE;sBAAA5B,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACjF;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,EACL,EAAAc,kBAAA,GAAAhE,YAAY,CAACmB,GAAG,CAAC,cAAA6C,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmB5E,SAAS,cAAA6E,qBAAA,uBAA5BA,qBAAA,CAA8BjF,SAAS,kBACpCN,OAAA,CAACR,GAAG;gBAAAoE,QAAA,gBACA5D,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,oBAAqB;oBAAAmB,QAAA,gBAC9C5D,OAAA,CAACV,IAAI,CAAC+G,KAAK;sBAAAzC,QAAA,EAAC;oBAAoB;sBAAAS,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,eAC7CxE,OAAA,CAACV,IAAI,CAACgH,OAAO;sBACTP,IAAI,EAAC,MAAM;sBACXnD,KAAK,EAAE,EAAA4C,kBAAA,GAAAlE,YAAY,CAACmB,GAAG,CAAC,cAAA+C,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmB9E,SAAS,cAAA+E,qBAAA,uBAA5BA,qBAAA,CAA8BrF,SAAS,KAAI,EAAG;sBACrD8F,QAAQ,EAAGC,CAAC,IAAK3D,gBAAgB,CAACC,GAAG,EAAE,WAAW,EAAE,WAAW,EAAE0D,CAAC,CAACC,MAAM,CAACxD,KAAK;oBAAE;sBAAAyB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACpF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ,CAAC,eACNxE,OAAA,CAACP,GAAG;kBAAAmE,QAAA,eACA5D,OAAA,CAACV,IAAI,CAACsG,KAAK;oBAACC,SAAS,EAAE,GAAGpD,GAAG,kBAAmB;oBAAAmB,QAAA,gBAC5C5D,OAAA,CAACV,IAAI,CAAC+G,KAAK;sBAAAzC,QAAA,EAAC;oBAAkB;sBAAAS,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAY,CAAC,eAC3CxE,OAAA,CAACV,IAAI,CAACgH,OAAO;sBACTP,IAAI,EAAC,MAAM;sBACXnD,KAAK,EAAE,EAAA8C,kBAAA,GAAApE,YAAY,CAACmB,GAAG,CAAC,cAAAiD,kBAAA,wBAAAC,qBAAA,GAAjBD,kBAAA,CAAmBhF,SAAS,cAAAiF,qBAAA,uBAA5BA,qBAAA,CAA8BtF,OAAO,KAAI,EAAG;sBACnD6F,QAAQ,EAAGC,CAAC,IAAK3D,gBAAgB,CAACC,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE0D,CAAC,CAACC,MAAM,CAACxD,KAAK;oBAAE;sBAAAyB,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClF,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACM;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CACR;YAAA,GAzEK/B,GAAG;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OA0ER,CAAC;UAAA,CACT,CAAC,eACFxE,OAAA,CAACT,MAAM;YAACgH,OAAO,EAAC,SAAS;YAACC,OAAO,EAAEjD,YAAa;YAACO,SAAS,EAAC,MAAM;YAAAF,QAAA,EAAC;UAAiB;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC5FxE,OAAA,CAACT,MAAM;YAACgH,OAAO,EAAE/E,uBAAuB,GAAG,QAAQ,GAAG,SAAU;YAACgF,OAAO,EAAE7C,kBAAmB;YAAAC,QAAA,EACxFpC,uBAAuB,GAAG,yBAAyB,GAAG;UAAuB;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA,eACT,CAAC;AAEX;AAACtD,EAAA,CA5MQD,wBAAwB;EAAA,QACZpB,WAAW;AAAA;AAAA4G,EAAA,GADvBxF,wBAAwB;AA8MjC,eAAeA,wBAAwB;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}