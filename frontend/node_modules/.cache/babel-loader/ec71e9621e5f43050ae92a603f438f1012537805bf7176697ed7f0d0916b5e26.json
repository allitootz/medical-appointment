{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\frontend\\\\src\\\\components\\\\patient\\\\scheduledappointment\\\\VerticalDoctorList.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport { Card, Container } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { ip } from \"../../../ContentExport\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultImage = \"images/014ef2f860e8e56b27d4a3267e0a193a.jpg\";\nfunction VerticalDoctorList({\n  pid\n}) {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const navigate = useNavigate();\n  const scrollRef = useRef(null);\n\n  // Fetch all the doctors when the component loads\n  useEffect(() => {\n    axios.get(`${ip.address}/doctor/api/alldoctor`).then(res => {\n      setDoctors(res.data.theDoctor);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  const handleDoctorClick = did => {\n    navigate(`/doctorprofile/${pid}/${did}`); // Navigate to doctor profile with the patient ID\n  };\n  const timeSinceLastActive = lastActive => {\n    const now = new Date();\n    const lastActiveDate = new Date(lastActive);\n    const secondsAgo = Math.floor((now - lastActiveDate) / 1000);\n    const minutesAgo = Math.floor(secondsAgo / 60);\n    const hoursAgo = Math.floor(minutesAgo / 60);\n    const daysAgo = Math.floor(hoursAgo / 24);\n    const weeksAgo = Math.floor(daysAgo / 7);\n    if (minutesAgo < 1) return \"Active just now\";\n    if (minutesAgo < 60) return `Active ${minutesAgo} minute${minutesAgo > 1 ? \"s\" : \"\"} ago`;\n    if (hoursAgo < 24) return `Active ${hoursAgo} hour${hoursAgo > 1 ? \"s\" : \"\"} ago`;\n    if (daysAgo < 7) return `Active ${daysAgo} day${daysAgo > 1 ? \"s\" : \"\"} ago`;\n    return `Active ${weeksAgo} week${weeksAgo > 1 ? \"s\" : \"\"} ago`;\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vertical-doctor-list d-flex justify-content-center flex-column align-items-center\",\n      ref: scrollRef,\n      style: {\n        maxHeight: \"800px\",\n        // Limit the height to show 3-4 cards\n        overflowY: \"auto\",\n        scrollbarWidth: \"thin\",\n        // For Firefox\n        scrollbarColor: \"transparent transparent\",\n        // Hidden by default\n        padding: \"10px 0\",\n        width: \"100%\",\n        paddingTop: '1100px' // Ensure the container takes up the full width\n      },\n      children: doctors.slice(0, 10).map(doctor => {\n        const doctorImage = doctor.dr_image || defaultImage;\n\n        // Define the status color based on the activity status\n        const statusColor = doctor.activityStatus === \"Online\" ? \"green\" : doctor.activityStatus === \"In Session\" ? \"orange\" : \"gray\";\n        return /*#__PURE__*/_jsxDEV(Card, {\n          className: \"cd-card\",\n          onClick: () => handleDoctorClick(doctor._id),\n          style: {\n            width: \"14rem\",\n            marginTop: \"20px\",\n            // Vertical margin between cards\n            textAlign: \"center\" // Center-align card content\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: `${ip.address}/${doctorImage}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              style: {\n                fontSize: \"14px\"\n              },\n              children: [doctor.dr_firstName, \" \", doctor.dr_middleInitial, \".\", \" \", doctor.dr_lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: \"12px\",\n                fontStyle: \"italic\"\n              },\n              children: doctor.dr_specialty\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                fontSize: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"status-indicator\",\n                style: {\n                  backgroundColor: statusColor,\n                  borderRadius: \"50%\",\n                  display: \"inline-block\",\n                  width: \"8px\",\n                  height: \"8px\",\n                  marginRight: \"8px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), doctor.activityStatus === \"Online\" ? \"Online\" : doctor.activityStatus === \"In Session\" ? \"In Session\" : `Last Active: ${timeSinceLastActive(doctor.lastActive)}`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, doctor._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(VerticalDoctorList, \"Ec9K9tQxwAbm7RhUUTam8Zl83Lk=\", false, function () {\n  return [useNavigate];\n});\n_c = VerticalDoctorList;\nexport default VerticalDoctorList;\nvar _c;\n$RefreshReg$(_c, \"VerticalDoctorList\");","map":{"version":3,"names":["useNavigate","Card","Container","axios","useEffect","useState","useRef","ip","jsxDEV","_jsxDEV","defaultImage","VerticalDoctorList","pid","_s","doctors","setDoctors","navigate","scrollRef","get","address","then","res","data","theDoctor","catch","err","console","log","handleDoctorClick","did","timeSinceLastActive","lastActive","now","Date","lastActiveDate","secondsAgo","Math","floor","minutesAgo","hoursAgo","daysAgo","weeksAgo","children","className","ref","style","maxHeight","overflowY","scrollbarWidth","scrollbarColor","padding","width","paddingTop","slice","map","doctor","doctorImage","dr_image","statusColor","activityStatus","onClick","_id","marginTop","textAlign","Img","variant","src","fileName","_jsxFileName","lineNumber","columnNumber","Body","Title","fontSize","dr_firstName","dr_middleInitial","dr_lastName","fontStyle","dr_specialty","backgroundColor","borderRadius","display","height","marginRight","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/frontend/src/components/patient/scheduledappointment/VerticalDoctorList.jsx"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\r\nimport { Card, Container } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { ip } from \"../../../ContentExport\";\r\nconst defaultImage = \"images/014ef2f860e8e56b27d4a3267e0a193a.jpg\";\r\n\r\nfunction VerticalDoctorList({ pid }) {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const navigate = useNavigate();\r\n  const scrollRef = useRef(null);\r\n\r\n  // Fetch all the doctors when the component loads\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${ip.address}/doctor/api/alldoctor`)\r\n      .then((res) => {\r\n        setDoctors(res.data.theDoctor);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const handleDoctorClick = (did) => {\r\n    navigate(`/doctorprofile/${pid}/${did}`); // Navigate to doctor profile with the patient ID\r\n  };\r\n\r\n  const timeSinceLastActive = (lastActive) => {\r\n    const now = new Date();\r\n    const lastActiveDate = new Date(lastActive);\r\n    const secondsAgo = Math.floor((now - lastActiveDate) / 1000);\r\n    const minutesAgo = Math.floor(secondsAgo / 60);\r\n    const hoursAgo = Math.floor(minutesAgo / 60);\r\n    const daysAgo = Math.floor(hoursAgo / 24);\r\n    const weeksAgo = Math.floor(daysAgo / 7);\r\n\r\n    if (minutesAgo < 1) return \"Active just now\";\r\n    if (minutesAgo < 60)\r\n      return `Active ${minutesAgo} minute${minutesAgo > 1 ? \"s\" : \"\"} ago`;\r\n    if (hoursAgo < 24)\r\n      return `Active ${hoursAgo} hour${hoursAgo > 1 ? \"s\" : \"\"} ago`;\r\n    if (daysAgo < 7)\r\n      return `Active ${daysAgo} day${daysAgo > 1 ? \"s\" : \"\"} ago`;\r\n    return `Active ${weeksAgo} week${weeksAgo > 1 ? \"s\" : \"\"} ago`;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div\r\n        className=\"vertical-doctor-list d-flex justify-content-center flex-column align-items-center\"\r\n        ref={scrollRef}\r\n        style={{\r\n          maxHeight: \"800px\", // Limit the height to show 3-4 cards\r\n          overflowY: \"auto\",\r\n          scrollbarWidth: \"thin\", // For Firefox\r\n          scrollbarColor: \"transparent transparent\", // Hidden by default\r\n          padding: \"10px 0\",\r\n          width: \"100%\",\r\n          paddingTop: '1100px' // Ensure the container takes up the full width\r\n        }}\r\n      >\r\n        {doctors.slice(0, 10).map((doctor) => {\r\n          const doctorImage = doctor.dr_image || defaultImage;\r\n\r\n          // Define the status color based on the activity status\r\n          const statusColor =\r\n            doctor.activityStatus === \"Online\"\r\n              ? \"green\"\r\n              : doctor.activityStatus === \"In Session\"\r\n              ? \"orange\"\r\n              : \"gray\";\r\n\r\n          return (\r\n            <Card\r\n              key={doctor._id}\r\n              className=\"cd-card\"\r\n              onClick={() => handleDoctorClick(doctor._id)}\r\n              style={{\r\n                width: \"14rem\",\r\n                marginTop: \"20px\", // Vertical margin between cards\r\n                textAlign: \"center\", // Center-align card content\r\n              }}\r\n            >\r\n              <Card.Img\r\n                variant=\"top\"\r\n                src={`${ip.address}/${doctorImage}`}\r\n              />\r\n              <Card.Body>\r\n                <Card.Title style={{ fontSize: \"14px\" }}>\r\n                  {doctor.dr_firstName} {doctor.dr_middleInitial}.{\" \"}\r\n                  {doctor.dr_lastName}\r\n                </Card.Title>\r\n                <p style={{ fontSize: \"12px\", fontStyle: \"italic\" }}>\r\n                  {doctor.dr_specialty}\r\n                </p>\r\n\r\n                {/* Adding Activity Status below the card */}\r\n                <p style={{ fontSize: \"10px\" }}>\r\n                  <span\r\n                    className=\"status-indicator\"\r\n                    style={{\r\n                      backgroundColor: statusColor,\r\n                      borderRadius: \"50%\",\r\n                      display: \"inline-block\",\r\n                      width: \"8px\",\r\n                      height: \"8px\",\r\n                      marginRight: \"8px\",\r\n                    }}\r\n                  ></span>\r\n                  {doctor.activityStatus === \"Online\"\r\n                    ? \"Online\"\r\n                    : doctor.activityStatus === \"In Session\"\r\n                    ? \"In Session\"\r\n                    : `Last Active: ${timeSinceLastActive(doctor.lastActive)}`}\r\n                </p>\r\n              </Card.Body>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default VerticalDoctorList;\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,EAAE,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC5C,MAAMC,YAAY,GAAG,6CAA6C;AAElE,SAASC,kBAAkBA,CAAC;EAAEC;AAAI,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMW,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAC9B,MAAMiB,SAAS,GAAGX,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACdD,KAAK,CACFe,GAAG,CAAC,GAAGX,EAAE,CAACY,OAAO,uBAAuB,CAAC,CACzCC,IAAI,CAAEC,GAAG,IAAK;MACbN,UAAU,CAACM,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,iBAAiB,GAAIC,GAAG,IAAK;IACjCb,QAAQ,CAAC,kBAAkBJ,GAAG,IAAIiB,GAAG,EAAE,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMC,mBAAmB,GAAIC,UAAU,IAAK;IAC1C,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,cAAc,GAAG,IAAID,IAAI,CAACF,UAAU,CAAC;IAC3C,MAAMI,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,GAAG,GAAGE,cAAc,IAAI,IAAI,CAAC;IAC5D,MAAMI,UAAU,GAAGF,IAAI,CAACC,KAAK,CAACF,UAAU,GAAG,EAAE,CAAC;IAC9C,MAAMI,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACC,UAAU,GAAG,EAAE,CAAC;IAC5C,MAAME,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAACE,QAAQ,GAAG,EAAE,CAAC;IACzC,MAAME,QAAQ,GAAGL,IAAI,CAACC,KAAK,CAACG,OAAO,GAAG,CAAC,CAAC;IAExC,IAAIF,UAAU,GAAG,CAAC,EAAE,OAAO,iBAAiB;IAC5C,IAAIA,UAAU,GAAG,EAAE,EACjB,OAAO,UAAUA,UAAU,UAAUA,UAAU,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IACtE,IAAIC,QAAQ,GAAG,EAAE,EACf,OAAO,UAAUA,QAAQ,QAAQA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAChE,IAAIC,OAAO,GAAG,CAAC,EACb,OAAO,UAAUA,OAAO,OAAOA,OAAO,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAC7D,OAAO,UAAUC,QAAQ,QAAQA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;EAChE,CAAC;EAED,oBACEhC,OAAA,CAACP,SAAS;IAAAwC,QAAA,eACRjC,OAAA;MACEkC,SAAS,EAAC,mFAAmF;MAC7FC,GAAG,EAAE3B,SAAU;MACf4B,KAAK,EAAE;QACLC,SAAS,EAAE,OAAO;QAAE;QACpBC,SAAS,EAAE,MAAM;QACjBC,cAAc,EAAE,MAAM;QAAE;QACxBC,cAAc,EAAE,yBAAyB;QAAE;QAC3CC,OAAO,EAAE,QAAQ;QACjBC,KAAK,EAAE,MAAM;QACbC,UAAU,EAAE,QAAQ,CAAC;MACvB,CAAE;MAAAV,QAAA,EAED5B,OAAO,CAACuC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAEC,MAAM,IAAK;QACpC,MAAMC,WAAW,GAAGD,MAAM,CAACE,QAAQ,IAAI/C,YAAY;;QAEnD;QACA,MAAMgD,WAAW,GACfH,MAAM,CAACI,cAAc,KAAK,QAAQ,GAC9B,OAAO,GACPJ,MAAM,CAACI,cAAc,KAAK,YAAY,GACtC,QAAQ,GACR,MAAM;QAEZ,oBACElD,OAAA,CAACR,IAAI;UAEH0C,SAAS,EAAC,SAAS;UACnBiB,OAAO,EAAEA,CAAA,KAAMhC,iBAAiB,CAAC2B,MAAM,CAACM,GAAG,CAAE;UAC7ChB,KAAK,EAAE;YACLM,KAAK,EAAE,OAAO;YACdW,SAAS,EAAE,MAAM;YAAE;YACnBC,SAAS,EAAE,QAAQ,CAAE;UACvB,CAAE;UAAArB,QAAA,gBAEFjC,OAAA,CAACR,IAAI,CAAC+D,GAAG;YACPC,OAAO,EAAC,KAAK;YACbC,GAAG,EAAE,GAAG3D,EAAE,CAACY,OAAO,IAAIqC,WAAW;UAAG;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eACF7D,OAAA,CAACR,IAAI,CAACsE,IAAI;YAAA7B,QAAA,gBACRjC,OAAA,CAACR,IAAI,CAACuE,KAAK;cAAC3B,KAAK,EAAE;gBAAE4B,QAAQ,EAAE;cAAO,CAAE;cAAA/B,QAAA,GACrCa,MAAM,CAACmB,YAAY,EAAC,GAAC,EAACnB,MAAM,CAACoB,gBAAgB,EAAC,GAAC,EAAC,GAAG,EACnDpB,MAAM,CAACqB,WAAW;YAAA;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC,eACb7D,OAAA;cAAGoC,KAAK,EAAE;gBAAE4B,QAAQ,EAAE,MAAM;gBAAEI,SAAS,EAAE;cAAS,CAAE;cAAAnC,QAAA,EACjDa,MAAM,CAACuB;YAAY;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB,CAAC,eAGJ7D,OAAA;cAAGoC,KAAK,EAAE;gBAAE4B,QAAQ,EAAE;cAAO,CAAE;cAAA/B,QAAA,gBAC7BjC,OAAA;gBACEkC,SAAS,EAAC,kBAAkB;gBAC5BE,KAAK,EAAE;kBACLkC,eAAe,EAAErB,WAAW;kBAC5BsB,YAAY,EAAE,KAAK;kBACnBC,OAAO,EAAE,cAAc;kBACvB9B,KAAK,EAAE,KAAK;kBACZ+B,MAAM,EAAE,KAAK;kBACbC,WAAW,EAAE;gBACf;cAAE;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACG,CAAC,EACPf,MAAM,CAACI,cAAc,KAAK,QAAQ,GAC/B,QAAQ,GACRJ,MAAM,CAACI,cAAc,KAAK,YAAY,GACtC,YAAY,GACZ,gBAAgB7B,mBAAmB,CAACyB,MAAM,CAACxB,UAAU,CAAC,EAAE;YAAA;cAAAoC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACK,CAAC;QAAA,GAzCPf,MAAM,CAACM,GAAG;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA0CX,CAAC;MAEX,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB;AAACzD,EAAA,CApHQF,kBAAkB;EAAA,QAERX,WAAW;AAAA;AAAAoF,EAAA,GAFrBzE,kBAAkB;AAsH3B,eAAeA,kBAAkB;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}