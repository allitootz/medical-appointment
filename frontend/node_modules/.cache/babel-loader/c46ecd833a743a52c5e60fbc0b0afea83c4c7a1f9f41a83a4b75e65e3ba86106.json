{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\staffs\\\\medical secretary\\\\components\\\\Appointments\\\\AssignAppointmentModal.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\nimport Select from 'react-select'; // Import react-select\n\n// Helper function to convert 24-hour time to 12-hour AM/PM format\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst convert24To12 = time24 => {\n  const [hours, minutes] = time24.split(':');\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n  const hour12 = hours % 12 || 12; // convert 0 -> 12 for midnight and 13 -> 1 for PM\n  return `${hour12}:${minutes} ${ampm}`;\n};\n\n// Helper function to convert 12-hour AM/PM time to 24-hour format\nconst convert12To24 = time12 => {\n  const [time, modifier] = time12.split(' ');\n  let [hours, minutes] = time.split(':');\n  if (modifier === 'PM' && hours !== '12') {\n    hours = parseInt(hours, 10) + 12;\n  }\n  if (modifier === 'AM' && hours === '12') {\n    hours = '00';\n  }\n  return `${hours}:${minutes}`;\n};\nfunction AssignAppointmentModal({\n  show,\n  handleClose,\n  appointmentId\n}) {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [doctorName, setDoctorName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [availability, setAvailability] = useState({});\n  const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\n  const [morningTimeRange, setMorningTimeRange] = useState(\"\");\n  const [afternoonTimeRange, setAfternoonTimeRange] = useState(\"\");\n\n  // Fetch all doctors\n  useEffect(() => {\n    axios.get(`http://localhost:8000/doctor/api/alldoctor`).then(response => {\n      const doctorOptions = response.data.theDoctor.map(doctor => ({\n        value: doctor._id,\n        label: `${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`\n      }));\n      setDoctors(doctorOptions);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  // Fetch doctor's availability based on the selected doctor\n  useEffect(() => {\n    if (selectedDoctor) {\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor.value}`).then(response => {\n        const doctor = response.data.doctor;\n        setDoctorName(`${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`);\n        setAvailability(doctor.availability || {});\n        setActiveAppointmentStatus(doctor.activeAppointmentStatus);\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      setDoctorName('No Doctor Selected');\n      setAvailability({});\n      setMorningTimeRange(\"\");\n      setAfternoonTimeRange(\"\");\n    }\n  }, [selectedDoctor]);\n\n  // Function to generate time range for morning and afternoon in 12-hour AM/PM format\n  const generateTimeRange = (start, end) => {\n    const startTime = convert24To12(start);\n    const endTime = convert24To12(end);\n    return `${startTime} - ${endTime}`;\n  };\n\n  // Update available time slots based on selected date\n  useEffect(() => {\n    if (date) {\n      const selectedDate = new Date(date);\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      const day = daysOfWeek[selectedDate.getDay()];\n      if (availability[day]) {\n        var _dayAvailability$morn, _dayAvailability$afte;\n        const dayAvailability = availability[day];\n        if ((_dayAvailability$morn = dayAvailability.morning) !== null && _dayAvailability$morn !== void 0 && _dayAvailability$morn.available) {\n          setMorningTimeRange(generateTimeRange(dayAvailability.morning.startTime, dayAvailability.morning.endTime));\n        } else {\n          setMorningTimeRange(\"\");\n        }\n        if ((_dayAvailability$afte = dayAvailability.afternoon) !== null && _dayAvailability$afte !== void 0 && _dayAvailability$afte.available) {\n          setAfternoonTimeRange(generateTimeRange(dayAvailability.afternoon.startTime, dayAvailability.afternoon.endTime));\n        } else {\n          setAfternoonTimeRange(\"\");\n        }\n      }\n    } else {\n      setMorningTimeRange(\"\");\n      setAfternoonTimeRange(\"\");\n    }\n  }, [date, availability]);\n  const getTodayDate = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  const todayDate = getTodayDate();\n\n  // Handle appointment update\n  const updateAppointment = () => {\n    console.log('Selected Doctor:', selectedDoctor);\n    if (selectedDoctor && !selectedDoctor.value) {\n      window.alert(\"Please select a valid doctor.\");\n      return;\n    }\n    if (!date || !time) {\n      window.alert(\"Please select a valid date and time.\");\n      return;\n    }\n    const formData = {\n      doctor: selectedDoctor ? selectedDoctor.value : null,\n      date,\n      time: convert12To24(time) // Convert time back to 24-hour format before sending to the backend\n    };\n    console.log('Form Data:', formData);\n\n    // Make a PUT request to update the appointment\n    axios.put(`http://localhost:8000/appointments/${appointmentId}/assign`, formData).then(() => {\n      window.alert(\"Appointment updated successfully!\");\n      window.location.reload();\n    }).catch(err => {\n      if (err.response) {\n        console.log(err.response.data);\n        window.alert(`Error: ${err.response.data.message}`);\n      } else {\n        console.log(err);\n        window.alert('An error occurred while updating the appointment.');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    className: \"am-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"am-content\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        className: \"am-header\",\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Assign Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Select Doctor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            options: doctors,\n            value: selectedDoctor,\n            onChange: selected => setSelectedDoctor(selected),\n            placeholder: \"Search for a doctor\",\n            isClearable: true // Allows clearing the selection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"date\",\n            min: todayDate,\n            value: date,\n            onChange: e => setDate(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), morningTimeRange && /*#__PURE__*/_jsxDEV(Button, {\n            variant: time === morningTimeRange ? \"secondary\" : \"outline-primary\",\n            onClick: () => setTime(morningTimeRange.split(\" - \")[0]) // Set only the start time\n            ,\n            className: \"m-1\",\n            children: [\"Morning: \", morningTimeRange]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this), afternoonTimeRange && /*#__PURE__*/_jsxDEV(Button, {\n            variant: time === afternoonTimeRange ? \"secondary\" : \"outline-primary\",\n            onClick: () => setTime(afternoonTimeRange.split(\" - \")[0]) // Set only the start time\n            ,\n            className: \"m-1\",\n            children: [\"Afternoon: \", afternoonTimeRange]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this), !morningTimeRange && !afternoonTimeRange && /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"time\",\n            value: convert12To24(time) // Ensure it's in 24-hour format\n            ,\n            onChange: e => setTime(e.target.value) // Keep input in 24-hour format\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: updateAppointment,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n}\n_s(AssignAppointmentModal, \"4jO9aZlDJWjZKYTkyZ3s1KTsOWA=\");\n_c = AssignAppointmentModal;\nexport default AssignAppointmentModal;\nvar _c;\n$RefreshReg$(_c, \"AssignAppointmentModal\");","map":{"version":3,"names":["axios","useState","useEffect","Row","Col","Button","Form","Modal","Select","jsxDEV","_jsxDEV","convert24To12","time24","hours","minutes","split","ampm","hour12","convert12To24","time12","time","modifier","parseInt","AssignAppointmentModal","show","handleClose","appointmentId","_s","doctors","setDoctors","selectedDoctor","setSelectedDoctor","doctorName","setDoctorName","date","setDate","setTime","availability","setAvailability","activeAppointmentStatus","setActiveAppointmentStatus","morningTimeRange","setMorningTimeRange","afternoonTimeRange","setAfternoonTimeRange","get","then","response","doctorOptions","data","theDoctor","map","doctor","value","_id","label","dr_firstName","dr_middleInitial","dr_lastName","catch","err","console","log","generateTimeRange","start","end","startTime","endTime","selectedDate","Date","daysOfWeek","day","getDay","_dayAvailability$morn","_dayAvailability$afte","dayAvailability","morning","available","afternoon","getTodayDate","today","year","getFullYear","month","String","getMonth","padStart","getDate","todayDate","updateAppointment","window","alert","formData","put","location","reload","message","onHide","className","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Group","as","Label","options","onChange","selected","placeholder","isClearable","Control","type","min","e","target","required","variant","onClick","Footer","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/staffs/medical secretary/components/Appointments/AssignAppointmentModal.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\r\nimport Select from 'react-select'; // Import react-select\r\n\r\n// Helper function to convert 24-hour time to 12-hour AM/PM format\r\nconst convert24To12 = (time24) => {\r\n    const [hours, minutes] = time24.split(':');\r\n    const ampm = hours >= 12 ? 'PM' : 'AM';\r\n    const hour12 = hours % 12 || 12; // convert 0 -> 12 for midnight and 13 -> 1 for PM\r\n    return `${hour12}:${minutes} ${ampm}`;\r\n};\r\n\r\n// Helper function to convert 12-hour AM/PM time to 24-hour format\r\nconst convert12To24 = (time12) => {\r\n    const [time, modifier] = time12.split(' ');\r\n    let [hours, minutes] = time.split(':');\r\n    if (modifier === 'PM' && hours !== '12') {\r\n        hours = parseInt(hours, 10) + 12;\r\n    }\r\n    if (modifier === 'AM' && hours === '12') {\r\n        hours = '00';\r\n    }\r\n    return `${hours}:${minutes}`;\r\n};\r\n\r\nfunction AssignAppointmentModal({ show, handleClose, appointmentId }) {\r\n    const [doctors, setDoctors] = useState([]);\r\n    const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n    const [doctorName, setDoctorName] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [time, setTime] = useState(\"\");\r\n    const [availability, setAvailability] = useState({});\r\n    const [activeAppointmentStatus, setActiveAppointmentStatus] = useState(true);\r\n    const [morningTimeRange, setMorningTimeRange] = useState(\"\");\r\n    const [afternoonTimeRange, setAfternoonTimeRange] = useState(\"\");\r\n\r\n    // Fetch all doctors\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/doctor/api/alldoctor`)\r\n            .then((response) => {\r\n                const doctorOptions = response.data.theDoctor.map((doctor) => ({\r\n                    value: doctor._id,\r\n                    label: `${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`,\r\n                }));\r\n                setDoctors(doctorOptions);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, []);\r\n\r\n    // Fetch doctor's availability based on the selected doctor\r\n    useEffect(() => {\r\n        if (selectedDoctor) {\r\n            axios.get(`http://localhost:8000/doctor/${selectedDoctor.value}`)\r\n                .then((response) => {\r\n                    const doctor = response.data.doctor;\r\n                    setDoctorName(`${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`);\r\n                    setAvailability(doctor.availability || {});\r\n                    setActiveAppointmentStatus(doctor.activeAppointmentStatus);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            setDoctorName('No Doctor Selected');\r\n            setAvailability({});\r\n            setMorningTimeRange(\"\");\r\n            setAfternoonTimeRange(\"\");\r\n        }\r\n    }, [selectedDoctor]);\r\n\r\n    // Function to generate time range for morning and afternoon in 12-hour AM/PM format\r\n    const generateTimeRange = (start, end) => {\r\n        const startTime = convert24To12(start);\r\n        const endTime = convert24To12(end);\r\n        return `${startTime} - ${endTime}`;\r\n    };\r\n\r\n    // Update available time slots based on selected date\r\n    useEffect(() => {\r\n        if (date) {\r\n            const selectedDate = new Date(date);\r\n            const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n            const day = daysOfWeek[selectedDate.getDay()];\r\n\r\n            if (availability[day]) {\r\n                const dayAvailability = availability[day];\r\n                if (dayAvailability.morning?.available) {\r\n                    setMorningTimeRange(generateTimeRange(dayAvailability.morning.startTime, dayAvailability.morning.endTime));\r\n                } else {\r\n                    setMorningTimeRange(\"\");\r\n                }\r\n\r\n                if (dayAvailability.afternoon?.available) {\r\n                    setAfternoonTimeRange(generateTimeRange(dayAvailability.afternoon.startTime, dayAvailability.afternoon.endTime));\r\n                } else {\r\n                    setAfternoonTimeRange(\"\");\r\n                }\r\n            }\r\n        } else {\r\n            setMorningTimeRange(\"\");\r\n            setAfternoonTimeRange(\"\");\r\n        }\r\n    }, [date, availability]);\r\n\r\n    const getTodayDate = () => {\r\n        const today = new Date();\r\n        const year = today.getFullYear();\r\n        const month = String(today.getMonth() + 1).padStart(2, '0');\r\n        const day = String(today.getDate()).padStart(2, '0');\r\n        return `${year}-${month}-${day}`;\r\n    };\r\n\r\n    const todayDate = getTodayDate();\r\n\r\n    // Handle appointment update\r\n    const updateAppointment = () => {\r\n        console.log('Selected Doctor:', selectedDoctor);\r\n\r\n        if (selectedDoctor && !selectedDoctor.value) {\r\n            window.alert(\"Please select a valid doctor.\");\r\n            return;\r\n        }\r\n\r\n        if (!date || !time) {\r\n            window.alert(\"Please select a valid date and time.\");\r\n            return;\r\n        }\r\n\r\n        const formData = {\r\n            doctor: selectedDoctor ? selectedDoctor.value : null,\r\n            date,\r\n            time: convert12To24(time), // Convert time back to 24-hour format before sending to the backend\r\n        };\r\n\r\n        console.log('Form Data:', formData);\r\n\r\n        // Make a PUT request to update the appointment\r\n        axios.put(`http://localhost:8000/appointments/${appointmentId}/assign`, formData)\r\n            .then(() => {\r\n                window.alert(\"Appointment updated successfully!\");\r\n                window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response) {\r\n                    console.log(err.response.data);\r\n                    window.alert(`Error: ${err.response.data.message}`);\r\n                } else {\r\n                    console.log(err);\r\n                    window.alert('An error occurred while updating the appointment.');\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} className='am-overlay'>\r\n            <div className=\"am-content\">\r\n                <Modal.Header className=\"am-header\" closeButton>\r\n                    <Modal.Title>Assign Appointment</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {/* Doctor Selection with react-select */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Select Doctor</Form.Label>\r\n                        <Select\r\n                            options={doctors}\r\n                            value={selectedDoctor}\r\n                            onChange={(selected) => setSelectedDoctor(selected)}\r\n                            placeholder=\"Search for a doctor\"\r\n                            isClearable={true} // Allows clearing the selection\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {/* Date Selection */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Date</Form.Label>\r\n                        <Form.Control\r\n                            type=\"date\"\r\n                            min={todayDate}\r\n                            value={date}\r\n                            onChange={(e) => setDate(e.target.value)}\r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {/* Time Selection */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Time</Form.Label>\r\n                        {morningTimeRange && (\r\n                            <Button\r\n                                variant={time === morningTimeRange ? \"secondary\" : \"outline-primary\"}\r\n                                onClick={() => setTime(morningTimeRange.split(\" - \")[0])} // Set only the start time\r\n                                className=\"m-1\"\r\n                            >\r\n                                Morning: {morningTimeRange}\r\n                            </Button>\r\n                        )}\r\n                        {afternoonTimeRange && (\r\n                            <Button\r\n                                variant={time === afternoonTimeRange ? \"secondary\" : \"outline-primary\"}\r\n                                onClick={() => setTime(afternoonTimeRange.split(\" - \")[0])} // Set only the start time\r\n                                className=\"m-1\"\r\n                            >\r\n                                Afternoon: {afternoonTimeRange}\r\n                            </Button>\r\n                        )}\r\n                        {!morningTimeRange && !afternoonTimeRange && (\r\n                            <Form.Control\r\n                                type=\"time\"\r\n                                value={convert12To24(time)} // Ensure it's in 24-hour format\r\n                                onChange={(e) => setTime(e.target.value)} // Keep input in 24-hour format\r\n                            />\r\n                        )}\r\n                    </Form.Group>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={updateAppointment}>\r\n                        Submit\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </div>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AssignAppointmentModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}