{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\frontend\\\\src\\\\components\\\\patient\\\\doctorprofile\\\\DoctorCalendar.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect, useState, useRef } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { Card } from 'react-bootstrap';\nimport { ip } from '../../../ContentExport';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorCalendar = ({\n  did\n}) => {\n  _s();\n  const [doctorAppointments, setDoctorAppointments] = useState([]);\n  const calendarRef = useRef(null);\n  // const location = useLocation();\n  // const { pid, did } = location.state || {}; // Destructure pid and did from state\n  useEffect(() => {\n    // Fetch the doctor's appointments\n    axios.get(`${ip.address}/doctor/${did}`).then(res => {\n      const appointments = res.data.doctor.dr_appointments;\n      setDoctorAppointments(appointments);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [did]);\n\n  // Function to filter and group the appointments by date, counting only \"Scheduled\" and \"Pending\" statuses\n  const getPatientCountsByDate = appointments => {\n    const patientCountByDate = {};\n    appointments.forEach(appointment => {\n      const status = appointment.status;\n      const appointmentDate = appointment.date.split('T')[0];\n\n      // Only count appointments that are either \"Scheduled\" or \"Pending\"\n      if (status === 'Scheduled' || status === 'Pending') {\n        if (patientCountByDate[appointmentDate]) {\n          patientCountByDate[appointmentDate]++;\n        } else {\n          patientCountByDate[appointmentDate] = 1;\n        }\n      }\n    });\n    return patientCountByDate;\n  };\n\n  // Get the count of patients for each date\n  const patientCountByDate = getPatientCountsByDate(doctorAppointments);\n\n  // Create events for the calendar, one per date, showing the total patients\n  const events = Object.keys(patientCountByDate).map(date => ({\n    title: `${patientCountByDate[date]} Patients`,\n    start: date,\n    // The date of the appointments\n    allDay: true // We don't need specific time here, just the date\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-between pt-3\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"shadow mb-4 w-100\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"py-3\",\n        children: /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"m-0 font-weight-bold text-primary\",\n          children: \"Doctor's Appointment Calendar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          ref: calendarRef,\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          initialView: \"dayGridMonth\",\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n          },\n          height: \"auto\",\n          events: events // Use the events generated from the doctor appointments\n          ,\n          editable: false,\n          selectable: true\n          // Disable animations and transitions by ensuring no custom CSS or transitions are applied\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorCalendar, \"KLQFGE1ppqrfdxGK+QHJ3kPPw/c=\");\n_c = DoctorCalendar;\nexport default DoctorCalendar;\nvar _c;\n$RefreshReg$(_c, \"DoctorCalendar\");","map":{"version":3,"names":["axios","React","useEffect","useState","useRef","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Card","ip","useLocation","jsxDEV","_jsxDEV","DoctorCalendar","did","_s","doctorAppointments","setDoctorAppointments","calendarRef","get","address","then","res","appointments","data","doctor","dr_appointments","catch","err","console","log","getPatientCountsByDate","patientCountByDate","forEach","appointment","status","appointmentDate","date","split","events","Object","keys","map","title","start","allDay","className","children","Header","fileName","_jsxFileName","lineNumber","columnNumber","Body","ref","plugins","initialView","headerToolbar","left","center","right","height","editable","selectable","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/frontend/src/components/patient/doctorprofile/DoctorCalendar.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { Card } from 'react-bootstrap';\r\nimport { ip } from '../../../ContentExport';\r\nimport { useLocation } from 'react-router-dom';\r\nconst DoctorCalendar = ({did}) => {\r\n  const [doctorAppointments, setDoctorAppointments] = useState([]);\r\n  const calendarRef = useRef(null);\r\n  // const location = useLocation();\r\n  // const { pid, did } = location.state || {}; // Destructure pid and did from state\r\n  useEffect(() => {\r\n    // Fetch the doctor's appointments\r\n    axios\r\n      .get(`${ip.address}/doctor/${did}`)\r\n      .then((res) => {\r\n        const appointments = res.data.doctor.dr_appointments;\r\n        setDoctorAppointments(appointments);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [did]);\r\n\r\n  // Function to filter and group the appointments by date, counting only \"Scheduled\" and \"Pending\" statuses\r\n  const getPatientCountsByDate = (appointments) => {\r\n    const patientCountByDate = {};\r\n\r\n    appointments.forEach((appointment) => {\r\n      const status = appointment.status;\r\n      const appointmentDate = appointment.date.split('T')[0];\r\n\r\n      // Only count appointments that are either \"Scheduled\" or \"Pending\"\r\n      if (status === 'Scheduled' || status === 'Pending') {\r\n        if (patientCountByDate[appointmentDate]) {\r\n          patientCountByDate[appointmentDate]++;\r\n        } else {\r\n          patientCountByDate[appointmentDate] = 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    return patientCountByDate;\r\n  };\r\n\r\n  // Get the count of patients for each date\r\n  const patientCountByDate = getPatientCountsByDate(doctorAppointments);\r\n\r\n  // Create events for the calendar, one per date, showing the total patients\r\n  const events = Object.keys(patientCountByDate).map((date) => ({\r\n    title: `${patientCountByDate[date]} Patients`,\r\n    start: date, // The date of the appointments\r\n    allDay: true, // We don't need specific time here, just the date\r\n  }));\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-between pt-3\">\r\n      <Card className=\"shadow mb-4 w-100\">\r\n        <Card.Header className=\"py-3\">\r\n          <h6 className=\"m-0 font-weight-bold text-primary\">Doctor's Appointment Calendar</h6>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <FullCalendar\r\n            ref={calendarRef}\r\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n            initialView=\"dayGridMonth\"\r\n            headerToolbar={{\r\n              left: 'prev,next today',\r\n              center: 'title',\r\n              right: 'dayGridMonth,timeGridWeek,timeGridDay',\r\n            }}\r\n            height=\"auto\"\r\n            events={events} // Use the events generated from the doctor appointments\r\n            editable={false}\r\n            selectable={true}\r\n            // Disable animations and transitions by ensuring no custom CSS or transitions are applied\r\n          />\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}