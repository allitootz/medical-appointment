{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\patient\\\\PatientContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the PatientContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientContext = /*#__PURE__*/createContext();\n\n// Hook to use the PatientContext\nexport const usePatient = () => {\n  _s();\n  return useContext(PatientContext);\n};\n\n// PatientProvider to wrap around components that need access to patient and doctor data\n_s(usePatient, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const PatientProvider = ({\n  children\n}) => {\n  _s2();\n  // Load initial state from localStorage\n  const [patient, setPatient] = useState(() => {\n    const savedPatient = localStorage.getItem('patient');\n    return savedPatient ? JSON.parse(savedPatient) : null;\n  });\n  const [doctorId, setDoctorId] = useState(() => {\n    const savedDoctorId = localStorage.getItem('doctorId');\n    return savedDoctorId ? JSON.parse(savedDoctorId) : null;\n  });\n  useEffect(() => {\n    // Update localStorage whenever patient or doctorId state changes\n    if (patient) {\n      localStorage.setItem('patient', JSON.stringify(patient));\n    } else {\n      localStorage.removeItem('patient');\n    }\n    if (doctorId) {\n      localStorage.setItem('doctorId', JSON.stringify(doctorId));\n    } else {\n      localStorage.removeItem('doctorId');\n    }\n  }, [patient, doctorId]);\n  return /*#__PURE__*/_jsxDEV(PatientContext.Provider, {\n    value: {\n      patient,\n      setPatient,\n      doctorId,\n      setDoctorId\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s2(PatientProvider, \"Ku6fTWwd2dyBTaimpru72cG8QpU=\");\n_c = PatientProvider;\nvar _c;\n$RefreshReg$(_c, \"PatientProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PatientContext","usePatient","_s","PatientProvider","children","_s2","patient","setPatient","savedPatient","localStorage","getItem","JSON","parse","doctorId","setDoctorId","savedDoctorId","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/patient/PatientContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create the PatientContext\r\nconst PatientContext = createContext();\r\n\r\n// Hook to use the PatientContext\r\nexport const usePatient = () => useContext(PatientContext);\r\n\r\n// PatientProvider to wrap around components that need access to patient and doctor data\r\nexport const PatientProvider = ({ children }) => {\r\n  // Load initial state from localStorage\r\n  const [patient, setPatient] = useState(() => {\r\n    const savedPatient = localStorage.getItem('patient');\r\n    return savedPatient ? JSON.parse(savedPatient) : null;\r\n  });\r\n\r\n  const [doctorId, setDoctorId] = useState(() => {\r\n    const savedDoctorId = localStorage.getItem('doctorId');\r\n    return savedDoctorId ? JSON.parse(savedDoctorId) : null;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update localStorage whenever patient or doctorId state changes\r\n    if (patient) {\r\n      localStorage.setItem('patient', JSON.stringify(patient));\r\n    } else {\r\n      localStorage.removeItem('patient');\r\n    }\r\n\r\n    if (doctorId) {\r\n      localStorage.setItem('doctorId', JSON.stringify(doctorId));\r\n    } else {\r\n      localStorage.removeItem('doctorId');\r\n    }\r\n  }, [patient, doctorId]);\r\n\r\n  return (\r\n    <PatientContext.Provider value={{ patient, setPatient, doctorId, setDoctorId }}>\r\n      {children}\r\n    </PatientContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;;AAEtC;AACA,OAAO,MAAMO,UAAU,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,cAAc,CAAC;AAAA;;AAE1D;AAAAE,EAAA,CAFaD,UAAU;AAGvB,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,MAAM;IAC3C,MAAMY,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IACpD,OAAOF,YAAY,GAAGG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,GAAG,IAAI;EACvD,CAAC,CAAC;EAEF,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,MAAM;IAC7C,MAAMmB,aAAa,GAAGN,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,OAAOK,aAAa,GAAGJ,IAAI,CAACC,KAAK,CAACG,aAAa,CAAC,GAAG,IAAI;EACzD,CAAC,CAAC;EAEFlB,SAAS,CAAC,MAAM;IACd;IACA,IAAIS,OAAO,EAAE;MACXG,YAAY,CAACO,OAAO,CAAC,SAAS,EAAEL,IAAI,CAACM,SAAS,CAACX,OAAO,CAAC,CAAC;IAC1D,CAAC,MAAM;MACLG,YAAY,CAACS,UAAU,CAAC,SAAS,CAAC;IACpC;IAEA,IAAIL,QAAQ,EAAE;MACZJ,YAAY,CAACO,OAAO,CAAC,UAAU,EAAEL,IAAI,CAACM,SAAS,CAACJ,QAAQ,CAAC,CAAC;IAC5D,CAAC,MAAM;MACLJ,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;IACrC;EACF,CAAC,EAAE,CAACZ,OAAO,EAAEO,QAAQ,CAAC,CAAC;EAEvB,oBACEd,OAAA,CAACC,cAAc,CAACmB,QAAQ;IAACC,KAAK,EAAE;MAAEd,OAAO;MAAEC,UAAU;MAAEM,QAAQ;MAAEC;IAAY,CAAE;IAAAV,QAAA,EAC5EA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACnB,GAAA,CAhCWF,eAAe;AAAAsB,EAAA,GAAftB,eAAe;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}