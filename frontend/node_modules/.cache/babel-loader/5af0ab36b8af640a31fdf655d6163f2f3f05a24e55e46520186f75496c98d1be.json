{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\staffs\\\\medical secretary\\\\components\\\\Appointments\\\\AssignAppointmentModal.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AssignAppointmentModal({\n  show,\n  handleClose,\n  appointmentId\n}) {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [services, setServices] = useState([]); // Store available services\n  const [selectedService, setSelectedService] = useState(null); // Store selected service\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [doctorName, setDoctorName] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\"); // Store time in AM/PM format\n  const [availability, setAvailability] = useState({});\n  const [morningTimeRange, setMorningTimeRange] = useState(\"\");\n  const [afternoonTimeRange, setAfternoonTimeRange] = useState(\"\");\n\n  // Fetch all doctors\n  useEffect(() => {\n    axios.get(`http://localhost:8000/doctor/api/alldoctor`).then(response => {\n      const doctorOptions = response.data.theDoctor.map(doctor => ({\n        value: doctor._id,\n        label: `${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`\n      }));\n      setDoctors(doctorOptions);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  // Fetch doctor's availability and services based on the selected doctor\n  useEffect(() => {\n    if (selectedDoctor) {\n      axios.get(`http://localhost:8000/doctor/${selectedDoctor.value}`).then(response => {\n        const doctor = response.data.doctor;\n        setDoctorName(`${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`);\n        setAvailability(doctor.availability || {});\n        setServices(doctor.dr_services || []); // Fetch only doctor's specific services\n      }).catch(err => {\n        console.log(err);\n      });\n    } else {\n      // Fetch all services if no doctor is selected\n      axios.get(`http://localhost:8000/admin/getall/services`).then(response => {\n        setServices(response.data); // Fetch all available services\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [selectedDoctor]);\n\n  // Function to generate time range in 12-hour format with AM/PM for display\n  const generateTimeRange = (start, end) => {\n    const startTime = new Date(`1970-01-01T${start}`).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n    const endTime = new Date(`1970-01-01T${end}`).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n    return `${startTime} - ${endTime}`;\n  };\n\n  // Update available time slots based on selected date\n  useEffect(() => {\n    if (date) {\n      const selectedDate = new Date(date);\n      const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      const day = daysOfWeek[selectedDate.getDay()];\n      if (availability[day]) {\n        var _dayAvailability$morn, _dayAvailability$afte;\n        const dayAvailability = availability[day];\n        if ((_dayAvailability$morn = dayAvailability.morning) !== null && _dayAvailability$morn !== void 0 && _dayAvailability$morn.available) {\n          setMorningTimeRange(generateTimeRange(dayAvailability.morning.startTime, dayAvailability.morning.endTime));\n        } else {\n          setMorningTimeRange(\"\");\n        }\n        if ((_dayAvailability$afte = dayAvailability.afternoon) !== null && _dayAvailability$afte !== void 0 && _dayAvailability$afte.available) {\n          setAfternoonTimeRange(generateTimeRange(dayAvailability.afternoon.startTime, dayAvailability.afternoon.endTime));\n        } else {\n          setAfternoonTimeRange(\"\");\n        }\n      }\n    } else {\n      setMorningTimeRange(\"\");\n      setAfternoonTimeRange(\"\");\n    }\n  }, [date, availability]);\n  const getTodayDate = () => {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n  const todayDate = getTodayDate();\n\n  // Function to handle time selection and directly set AM/PM formatted time\n  const handleTimeSelection = selectedTime => {\n    setTime(selectedTime); // Save time directly in AM/PM format\n  };\n\n  // Handle appointment update\n  const updateAppointment = () => {\n    if (selectedDoctor && !selectedDoctor.value) {\n      window.alert(\"Please select a valid doctor.\");\n      return;\n    }\n    if (!date || !time || !selectedService) {\n      window.alert(\"Please select a valid date, time, and service.\");\n      return;\n    }\n\n    // Ensure the appointment_type is structured correctly (appointment_type and category)\n    const appointmentType = {\n      appointment_type: selectedService.label,\n      // Assuming `label` is the name of the service\n      category: selectedService.category || 'General' // Add the category if available, or default to 'General'\n    };\n    const formData = {\n      doctor: selectedDoctor ? selectedDoctor.value : null,\n      appointment_type: appointmentType,\n      // Pass the structured object\n      date,\n      time // Time is now stored in AM/PM format\n    };\n    console.log('FormData being sent:', formData); // Check the form data being sent\n\n    axios.put(`http://localhost:8000/appointments/${appointmentId}/assign`, formData).then(() => {\n      window.alert(\"Appointment updated successfully!\");\n      window.location.reload();\n    }).catch(err => {\n      if (err.response) {\n        console.log(err.response.data);\n        window.alert(`Error: ${err.response.data.message}`);\n      } else {\n        console.log(err);\n        window.alert('An error occurred while updating the appointment.');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    className: \"am-overlay\",\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      className: \"am-header\",\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        children: \"Assign Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      className: \"w-100\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Doctor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: doctors,\n          value: selectedDoctor,\n          onChange: selected => {\n            setSelectedDoctor(selected);\n            if (!selected) {\n              // Reset all relevant states when doctor selection is cleared\n              setSelectedService(null);\n              setDoctorName(\"\");\n              setDate(\"\");\n              setTime(\"\");\n              setAvailability({});\n              setMorningTimeRange(\"\");\n              setAfternoonTimeRange(\"\");\n            }\n          },\n          placeholder: \"Search for a doctor\",\n          isClearable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Service\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          options: services.map(service => ({\n            value: service._id,\n            label: service.name,\n            category: service.category // Assuming the category field is available\n          })) // Display services\n          ,\n          value: selectedService,\n          onChange: selected => setSelectedService(selected),\n          placeholder: \"Select a service\",\n          isClearable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"date\",\n          min: todayDate,\n          value: date,\n          onChange: e => setDate(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }, this), morningTimeRange && /*#__PURE__*/_jsxDEV(Button, {\n          variant: time === morningTimeRange ? \"secondary\" : \"outline-primary\",\n          onClick: () => handleTimeSelection(morningTimeRange),\n          className: \"m-1\",\n          children: [\"Morning: \", morningTimeRange]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this), afternoonTimeRange && /*#__PURE__*/_jsxDEV(Button, {\n          variant: time === afternoonTimeRange ? \"secondary\" : \"outline-primary\",\n          onClick: () => handleTimeSelection(afternoonTimeRange),\n          className: \"m-1\",\n          children: [\"Afternoon: \", afternoonTimeRange]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 29\n        }, this), !morningTimeRange && !afternoonTimeRange && /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"time\",\n          value: time // Keep time in 12-hour format for input\n          ,\n          onChange: e => setTime(e.target.value),\n          placeholder: \"Enter time\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: handleClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: updateAppointment,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n}\n_s(AssignAppointmentModal, \"5RV/GQvmxditXEb52lZxGlh3rV0=\");\n_c = AssignAppointmentModal;\nexport default AssignAppointmentModal;\nvar _c;\n$RefreshReg$(_c, \"AssignAppointmentModal\");","map":{"version":3,"names":["axios","useState","useEffect","Row","Col","Button","Form","Modal","Select","jsxDEV","_jsxDEV","AssignAppointmentModal","show","handleClose","appointmentId","_s","doctors","setDoctors","services","setServices","selectedService","setSelectedService","selectedDoctor","setSelectedDoctor","doctorName","setDoctorName","date","setDate","time","setTime","availability","setAvailability","morningTimeRange","setMorningTimeRange","afternoonTimeRange","setAfternoonTimeRange","get","then","response","doctorOptions","data","theDoctor","map","doctor","value","_id","label","dr_firstName","dr_middleInitial","dr_lastName","catch","err","console","log","dr_services","generateTimeRange","start","end","startTime","Date","toLocaleTimeString","hour","minute","hour12","endTime","selectedDate","daysOfWeek","day","getDay","_dayAvailability$morn","_dayAvailability$afte","dayAvailability","morning","available","afternoon","getTodayDate","today","year","getFullYear","month","String","getMonth","padStart","getDate","todayDate","handleTimeSelection","selectedTime","updateAppointment","window","alert","appointmentType","appointment_type","category","formData","put","location","reload","message","onHide","className","children","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","Group","as","Label","options","onChange","selected","placeholder","isClearable","service","name","Control","type","min","e","target","required","variant","onClick","Footer","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/staffs/medical secretary/components/Appointments/AssignAppointmentModal.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Row, Col, Button, Form, Modal } from 'react-bootstrap';\r\nimport Select from 'react-select';\r\n\r\nfunction AssignAppointmentModal({ show, handleClose, appointmentId }) {\r\n    const [doctors, setDoctors] = useState([]);\r\n    const [services, setServices] = useState([]); // Store available services\r\n    const [selectedService, setSelectedService] = useState(null); // Store selected service\r\n    const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n    const [doctorName, setDoctorName] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    const [time, setTime] = useState(\"\"); // Store time in AM/PM format\r\n    const [availability, setAvailability] = useState({});\r\n    const [morningTimeRange, setMorningTimeRange] = useState(\"\");\r\n    const [afternoonTimeRange, setAfternoonTimeRange] = useState(\"\");\r\n\r\n    // Fetch all doctors\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/doctor/api/alldoctor`)\r\n            .then((response) => {\r\n                const doctorOptions = response.data.theDoctor.map((doctor) => ({\r\n                    value: doctor._id,\r\n                    label: `${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`,\r\n                }));\r\n                setDoctors(doctorOptions);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, []);\r\n\r\n    // Fetch doctor's availability and services based on the selected doctor\r\n    useEffect(() => {\r\n        if (selectedDoctor) {\r\n            axios.get(`http://localhost:8000/doctor/${selectedDoctor.value}`)\r\n                .then((response) => {\r\n                    const doctor = response.data.doctor;\r\n                    setDoctorName(`${doctor.dr_firstName} ${doctor.dr_middleInitial}. ${doctor.dr_lastName}`);\r\n                    setAvailability(doctor.availability || {});\r\n                    setServices(doctor.dr_services || []); // Fetch only doctor's specific services\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            // Fetch all services if no doctor is selected\r\n            axios.get(`http://localhost:8000/admin/getall/services`)\r\n                .then((response) => {\r\n                    setServices(response.data); // Fetch all available services\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }, [selectedDoctor]);\r\n\r\n    // Function to generate time range in 12-hour format with AM/PM for display\r\n    const generateTimeRange = (start, end) => {\r\n        const startTime = new Date(`1970-01-01T${start}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });\r\n        const endTime = new Date(`1970-01-01T${end}`).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });\r\n        return `${startTime} - ${endTime}`;\r\n    };\r\n\r\n    // Update available time slots based on selected date\r\n    useEffect(() => {\r\n        if (date) {\r\n            const selectedDate = new Date(date);\r\n            const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n            const day = daysOfWeek[selectedDate.getDay()];\r\n\r\n            if (availability[day]) {\r\n                const dayAvailability = availability[day];\r\n                if (dayAvailability.morning?.available) {\r\n                    setMorningTimeRange(generateTimeRange(dayAvailability.morning.startTime, dayAvailability.morning.endTime));\r\n                } else {\r\n                    setMorningTimeRange(\"\");\r\n                }\r\n\r\n                if (dayAvailability.afternoon?.available) {\r\n                    setAfternoonTimeRange(generateTimeRange(dayAvailability.afternoon.startTime, dayAvailability.afternoon.endTime));\r\n                } else {\r\n                    setAfternoonTimeRange(\"\");\r\n                }\r\n            }\r\n        } else {\r\n            setMorningTimeRange(\"\");\r\n            setAfternoonTimeRange(\"\");\r\n        }\r\n    }, [date, availability]);\r\n\r\n    const getTodayDate = () => {\r\n        const today = new Date();\r\n        const year = today.getFullYear();\r\n        const month = String(today.getMonth() + 1).padStart(2, '0');\r\n        const day = String(today.getDate()).padStart(2, '0');\r\n        return `${year}-${month}-${day}`;\r\n    };\r\n\r\n    const todayDate = getTodayDate();\r\n\r\n    // Function to handle time selection and directly set AM/PM formatted time\r\n    const handleTimeSelection = (selectedTime) => {\r\n        setTime(selectedTime); // Save time directly in AM/PM format\r\n    };\r\n\r\n    // Handle appointment update\r\n    const updateAppointment = () => {\r\n        if (selectedDoctor && !selectedDoctor.value) {\r\n            window.alert(\"Please select a valid doctor.\");\r\n            return;\r\n        }\r\n\r\n        if (!date || !time || !selectedService) {\r\n            window.alert(\"Please select a valid date, time, and service.\");\r\n            return;\r\n        }\r\n\r\n        // Ensure the appointment_type is structured correctly (appointment_type and category)\r\n        const appointmentType = {\r\n            appointment_type: selectedService.label,  // Assuming `label` is the name of the service\r\n            category: selectedService.category || 'General'  // Add the category if available, or default to 'General'\r\n        };\r\n\r\n        const formData = {\r\n            doctor: selectedDoctor ? selectedDoctor.value : null,\r\n            appointment_type: appointmentType,  // Pass the structured object\r\n            date,\r\n            time, // Time is now stored in AM/PM format\r\n        };\r\n\r\n        console.log('FormData being sent:', formData);  // Check the form data being sent\r\n\r\n        axios.put(`http://localhost:8000/appointments/${appointmentId}/assign`, formData)\r\n            .then(() => {\r\n                window.alert(\"Appointment updated successfully!\");\r\n                window.location.reload();\r\n            })\r\n            .catch((err) => {\r\n                if (err.response) {\r\n                    console.log(err.response.data);\r\n                    window.alert(`Error: ${err.response.data.message}`);\r\n                } else {\r\n                    console.log(err);\r\n                    window.alert('An error occurred while updating the appointment.');\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} className='am-overlay'>\r\n            \r\n                <Modal.Header className=\"am-header\" closeButton>\r\n                    <Modal.Title>Assign Appointment</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"w-100\">\r\n                    {/* Doctor Selection with react-select */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Select Doctor</Form.Label>\r\n                        <Select\r\n                          options={doctors}\r\n                          value={selectedDoctor}\r\n                          onChange={(selected) => {\r\n                              setSelectedDoctor(selected);\r\n                              if (!selected) {\r\n                                  // Reset all relevant states when doctor selection is cleared\r\n                                  setSelectedService(null);\r\n                                  setDoctorName(\"\");\r\n                                  setDate(\"\");\r\n                                  setTime(\"\");\r\n                                  setAvailability({});\r\n                                  setMorningTimeRange(\"\");\r\n                                  setAfternoonTimeRange(\"\");\r\n                              }\r\n                          }}\r\n                          placeholder=\"Search for a doctor\"\r\n                          isClearable={true}\r\n                      />\r\n                    </Form.Group>\r\n\r\n                    {/* Service Selection with react-select */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Select Service</Form.Label>\r\n                        <Select\r\n                          options={services.map(service => ({\r\n                              value: service._id,\r\n                              label: service.name,\r\n                              category: service.category  // Assuming the category field is available\r\n                          }))} // Display services\r\n                          value={selectedService}\r\n                          onChange={(selected) => setSelectedService(selected)}\r\n                          placeholder=\"Select a service\"\r\n                          isClearable={true}\r\n                      />\r\n\r\n                    </Form.Group>\r\n\r\n                    {/* Date Selection */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Date</Form.Label>\r\n                        <Form.Control\r\n                            type=\"date\"\r\n                            min={todayDate}\r\n                            value={date}\r\n                            onChange={(e) => setDate(e.target.value)}\r\n                            required\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {/* Time Selection */}\r\n                    <Form.Group as={Col} className=\"mb-3\">\r\n                        <Form.Label>Time</Form.Label>\r\n                        {morningTimeRange && (\r\n                            <Button\r\n                                variant={time === morningTimeRange ? \"secondary\" : \"outline-primary\"}\r\n                                onClick={() => handleTimeSelection(morningTimeRange)}\r\n                                className=\"m-1\"\r\n                            >\r\n                                Morning: {morningTimeRange}\r\n                            </Button>\r\n                        )}\r\n                        {afternoonTimeRange && (\r\n                            <Button\r\n                                variant={time === afternoonTimeRange ? \"secondary\" : \"outline-primary\"}\r\n                                onClick={() => handleTimeSelection(afternoonTimeRange)}\r\n                                className=\"m-1\"\r\n                            >\r\n                                Afternoon: {afternoonTimeRange}\r\n                            </Button>\r\n                        )}\r\n                        {!morningTimeRange && !afternoonTimeRange && (\r\n                            <Form.Control\r\n                                type=\"time\"\r\n                                value={time} // Keep time in 12-hour format for input\r\n                                onChange={(e) => setTime(e.target.value)}\r\n                                placeholder=\"Enter time\"\r\n                                required\r\n                            />\r\n                        )}\r\n                    </Form.Group>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={updateAppointment}>\r\n                        Submit\r\n                    </Button>\r\n                </Modal.Footer>\r\n          \r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AssignAppointmentModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}