{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\patient\\\\patientinformation\\\\PatientInformation\\\\UpdatePatientImageModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport axios from 'axios';\nimport CropResizeTiltModal from './CropResizeTiltModal'; // Import the cropping modal\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UpdatePatientImageModal = ({\n  show,\n  handleClose,\n  pid,\n  onImageUpload\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null); // For previewing the selected image\n  const [editedImage, setEditedImage] = useState(null); // Cropped image after editing\n  const [isCropModalOpen, setIsCropModalOpen] = useState(false); // Manage crop modal visibility\n\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageSrc(reader.result); // Preview the selected image\n      setIsCropModalOpen(true); // Open the crop modal after image selection\n    };\n    reader.readAsDataURL(file);\n  };\n  const handleImageEdit = croppedImageSrc => {\n    setEditedImage(croppedImageSrc); // Set the cropped image as base64\n    setIsCropModalOpen(false); // Close the crop modal after editing\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    if (editedImage) {\n      // Convert the base64 cropped image to a Blob\n      const response = await fetch(editedImage);\n      const blob = await response.blob();\n      const file = new File([blob], 'edited-image.png', {\n        type: 'image/png'\n      });\n      formData.append('image', file); // Append the cropped image to formData\n    } else if (selectedFile) {\n      formData.append('image', selectedFile); // Append the original selected image\n    }\n    try {\n      const response = await axios.post(`http://localhost:8000/patient/api/${pid}/updateimage`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Notify the parent component of the image change\n      onImageUpload(response.data.updatedPatient.patient_image);\n      handleClose(); // Close the modal\n    } catch (error) {\n      console.error('Error uploading image:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update Profile Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Select a new profile image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              accept: \"image/*\",\n              onChange: handleFileChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), editedImage || imageSrc ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Image Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: editedImage || imageSrc,\n              alt: \"Preview\",\n              style: {\n                maxWidth: '100%',\n                maxHeight: '300px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            className: \"mt-3\",\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CropResizeTiltModal, {\n      show: isCropModalOpen // Show the crop modal when it's triggered\n      ,\n      handleClose: () => setIsCropModalOpen(false) // Close the crop modal\n      ,\n      imageSrc: imageSrc // Pass the image source for cropping\n      ,\n      onSave: handleImageEdit // Handle the cropped image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(UpdatePatientImageModal, \"pjXDnISxXTzVxqFa7EheR/iOo7U=\");\n_c = UpdatePatientImageModal;\nexport default UpdatePatientImageModal;\nvar _c;\n$RefreshReg$(_c, \"UpdatePatientImageModal\");","map":{"version":3,"names":["React","useState","Modal","Button","Form","axios","CropResizeTiltModal","jsxDEV","_jsxDEV","Fragment","_Fragment","UpdatePatientImageModal","show","handleClose","pid","onImageUpload","_s","selectedFile","setSelectedFile","imageSrc","setImageSrc","editedImage","setEditedImage","isCropModalOpen","setIsCropModalOpen","handleFileChange","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","handleImageEdit","croppedImageSrc","handleSubmit","preventDefault","formData","FormData","response","fetch","blob","File","type","append","post","headers","data","updatedPatient","patient_image","error","console","children","onHide","Header","closeButton","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","onSubmit","Group","Label","Control","accept","onChange","className","src","alt","style","maxWidth","maxHeight","variant","onSave","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/patient/patientinformation/PatientInformation/UpdatePatientImageModal.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport CropResizeTiltModal from './CropResizeTiltModal'; // Import the cropping modal\r\n\r\nconst UpdatePatientImageModal = ({ show, handleClose, pid, onImageUpload }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [imageSrc, setImageSrc] = useState(null); // For previewing the selected image\r\n  const [editedImage, setEditedImage] = useState(null); // Cropped image after editing\r\n  const [isCropModalOpen, setIsCropModalOpen] = useState(false); // Manage crop modal visibility\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImageSrc(reader.result); // Preview the selected image\r\n      setIsCropModalOpen(true); // Open the crop modal after image selection\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const handleImageEdit = (croppedImageSrc) => {\r\n    setEditedImage(croppedImageSrc); // Set the cropped image as base64\r\n    setIsCropModalOpen(false); // Close the crop modal after editing\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = new FormData();\r\n\r\n    if (editedImage) {\r\n      // Convert the base64 cropped image to a Blob\r\n      const response = await fetch(editedImage);\r\n      const blob = await response.blob();\r\n      const file = new File([blob], 'edited-image.png', { type: 'image/png' });\r\n      formData.append('image', file); // Append the cropped image to formData\r\n    } else if (selectedFile) {\r\n      formData.append('image', selectedFile); // Append the original selected image\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:8000/patient/api/${pid}/updateimage`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      // Notify the parent component of the image change\r\n      onImageUpload(response.data.updatedPatient.patient_image);\r\n      handleClose(); // Close the modal\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Profile Image</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label>Select a new profile image</Form.Label>\r\n              <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n            </Form.Group>\r\n            {editedImage || imageSrc ? (\r\n              <div className=\"mt-3\">\r\n                <h5>Image Preview</h5>\r\n                <img\r\n                  src={editedImage || imageSrc}\r\n                  alt=\"Preview\"\r\n                  style={{ maxWidth: '100%', maxHeight: '300px' }}\r\n                />\r\n              </div>\r\n            ) : null}\r\n            <Button variant=\"primary\" type=\"submit\" className=\"mt-3\">\r\n              Upload\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      {/* Crop, Resize, and Tilt modal */}\r\n      <CropResizeTiltModal\r\n        show={isCropModalOpen} // Show the crop modal when it's triggered\r\n        handleClose={() => setIsCropModalOpen(false)} // Close the crop modal\r\n        imageSrc={imageSrc} // Pass the image source for cropping\r\n        onSave={handleImageEdit} // Handle the cropped image\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdatePatientImageModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}