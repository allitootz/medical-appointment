{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\School\\\\Integrative Programming\\\\medical-appointment\\\\src\\\\components\\\\practitioner\\\\accountinfo\\\\modal\\\\ImageUploadModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport axios from 'axios';\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport './UploadImageModal.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageUploadModal = ({\n  isOpen,\n  onRequestClose,\n  did\n}) => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [imageSrc, setImageSrc] = useState(null);\n  const [editedImage, setEditedImage] = useState(null);\n\n  // Handle file selection and display a preview\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    const reader = new FileReader();\n    reader.onload = () => {\n      setImageSrc(reader.result);\n      setEditedImage(null); // Reset edited image when a new file is selected\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Update the edited image from the CropResizeTiltModal\n  const handleImageEdit = croppedImageSrc => {\n    setEditedImage(croppedImageSrc); // Set the cropped/edited image\n  };\n\n  // Handle form submission for image upload\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    if (editedImage) {\n      // Convert the edited image (base64) to a Blob for upload\n      const response = await fetch(editedImage);\n      const blob = await response.blob();\n      const file = new File([blob], 'edited-image.png', {\n        type: 'image/png'\n      });\n      formData.append('image', file);\n    } else if (selectedFile) {\n      formData.append('image', selectedFile); // If no edited image, use original file\n    }\n    try {\n      const response = await axios.post(`http://localhost:8000/doctor/api/${did}/updateimage`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Image uploaded successfully:', response.data);\n      onRequestClose(response.data.updatedDoctor.dr_image); // Pass the new image URL back to the parent component\n    } catch (error) {\n      console.error('Error uploading image:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onRequestClose: () => onRequestClose(null),\n    contentLabel: \"Image Upload Modal\",\n    className: \"image-upload-modal\",\n    overlayClassName: \"modal-overlay\",\n    ariaHideApp: false,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        className: \"ium-form\",\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          className: \"mb-3\",\n          children: /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), imageSrc && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setEditedImage(imageSrc),\n          children: \"Edit Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: editedImage || imageSrc,\n          alt: \"Preview\",\n          className: \"preview-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginTop: \"15px\"\n        },\n        type: \"submit\",\n        onClick: handleSubmit,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CropResizeTiltModal, {\n        isOpen: Boolean(editedImage),\n        onRequestClose: () => setEditedImage(null),\n        imageSrc: imageSrc,\n        onSave: handleImageEdit // This will save the edited image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUploadModal, \"FxOdGGwA2VTYnOZWMUxfbN66DAo=\");\n_c = ImageUploadModal;\nexport default ImageUploadModal;\nvar _c;\n$RefreshReg$(_c, \"ImageUploadModal\");","map":{"version":3,"names":["React","useState","Modal","axios","Button","Form","Col","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageUploadModal","isOpen","onRequestClose","did","_s","selectedFile","setSelectedFile","imageSrc","setImageSrc","editedImage","setEditedImage","handleFileChange","event","file","target","files","reader","FileReader","onload","result","readAsDataURL","handleImageEdit","croppedImageSrc","handleSubmit","preventDefault","formData","FormData","response","fetch","blob","File","type","append","post","headers","console","log","data","updatedDoctor","dr_image","error","contentLabel","className","overlayClassName","ariaHideApp","children","fileName","_jsxFileName","lineNumber","columnNumber","Group","as","Control","accept","onChange","onClick","src","alt","style","marginTop","CropResizeTiltModal","Boolean","onSave","_c","$RefreshReg$"],"sources":["E:/School/School/Integrative Programming/medical-appointment/src/components/practitioner/accountinfo/modal/ImageUploadModal.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport axios from 'axios';\r\nimport { Button, Form, Col } from \"react-bootstrap\";\r\nimport './UploadImageModal.css';\r\n\r\nconst ImageUploadModal = ({ isOpen, onRequestClose, did }) => {\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const [editedImage, setEditedImage] = useState(null);\r\n\r\n  // Handle file selection and display a preview\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImageSrc(reader.result);\r\n      setEditedImage(null); // Reset edited image when a new file is selected\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Update the edited image from the CropResizeTiltModal\r\n  const handleImageEdit = (croppedImageSrc) => {\r\n    setEditedImage(croppedImageSrc); // Set the cropped/edited image\r\n  };\r\n\r\n  // Handle form submission for image upload\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData();\r\n\r\n    if (editedImage) {\r\n      // Convert the edited image (base64) to a Blob for upload\r\n      const response = await fetch(editedImage);\r\n      const blob = await response.blob();\r\n      const file = new File([blob], 'edited-image.png', { type: 'image/png' });\r\n      formData.append('image', file);\r\n    } else if (selectedFile) {\r\n      formData.append('image', selectedFile); // If no edited image, use original file\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(`http://localhost:8000/doctor/api/${did}/updateimage`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      console.log('Image uploaded successfully:', response.data);\r\n      onRequestClose(response.data.updatedDoctor.dr_image); // Pass the new image URL back to the parent component\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={() => onRequestClose(null)}\r\n      contentLabel=\"Image Upload Modal\"\r\n      className=\"image-upload-modal\"\r\n      overlayClassName=\"modal-overlay\"\r\n      ariaHideApp={false}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <h2>Upload Image</h2>\r\n        <Form className='ium-form'>\r\n          <Form.Group as={Col} className=\"mb-3\">\r\n            <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        {imageSrc && (\r\n          <>\r\n            <Button onClick={() => setEditedImage(imageSrc)}>Edit Image</Button>\r\n            <img src={editedImage || imageSrc} alt=\"Preview\" className=\"preview-image\" />\r\n          </>\r\n        )}\r\n\r\n        <Button style={{ marginTop: \"15px\" }} type=\"submit\" onClick={handleSubmit}>Upload</Button>\r\n\r\n        <CropResizeTiltModal\r\n          isOpen={Boolean(editedImage)}\r\n          onRequestClose={() => setEditedImage(null)}\r\n          imageSrc={imageSrc}\r\n          onSave={handleImageEdit} // This will save the edited image\r\n        />\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ImageUploadModal;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}